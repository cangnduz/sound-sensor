
sound_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003094  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003150  08003150  00004150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e4  080031e4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080031e4  080031e4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e4  080031e4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e4  080031e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031e8  080031e8  000041e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080031ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  08003254  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003254  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006486  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e7  00000000  00000000  0000b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ad  00000000  00000000  0000d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd7  00000000  00000000  0000d965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008633  00000000  00000000  0002653c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf55  00000000  00000000  0002eb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002180  00000000  00000000  000cab08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ccc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003138 	.word	0x08003138

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08003138 	.word	0x08003138

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <Read_Sound_Level>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
	void Read_Sound_Level(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

		HAL_ADC_Start(&hadc1);
 8000234:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <Read_Sound_Level+0x3c>)
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fdd4 	bl	8000de4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800023c:	2301      	movs	r3, #1
 800023e:	425a      	negs	r2, r3
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <Read_Sound_Level+0x3c>)
 8000242:	0011      	movs	r1, r2
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fe1b 	bl	8000e80 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <Read_Sound_Level+0x3c>)
 800024c:	0018      	movs	r0, r3
 800024e:	f000 feab 	bl	8000fa8 <HAL_ADC_GetValue>
 8000252:	0002      	movs	r2, r0
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <Read_Sound_Level+0x40>)
 8000256:	601a      	str	r2, [r3, #0]
		printf("Sound Level (ADC Value): %lu\n", adc_value);
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <Read_Sound_Level+0x40>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <Read_Sound_Level+0x44>)
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f002 f8cb 	bl	80023fc <iprintf>
}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000084 	.word	0x20000084
 8000270:	200000e8 	.word	0x200000e8
 8000274:	08003150 	.word	0x08003150

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fa2a 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f80d 	bl	800029e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f8be 	bl	8000404 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000288:	f000 f852 	bl	8000330 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Sound_Level();
 800028c:	f7ff ffd0 	bl	8000230 <Read_Sound_Level>
	  HAL_Delay(1000);
 8000290:	23fa      	movs	r3, #250	@ 0xfa
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	0018      	movs	r0, r3
 8000296:	f000 faa3 	bl	80007e0 <HAL_Delay>
	  Read_Sound_Level();
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	e7f6      	b.n	800028c <main+0x14>

0800029e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029e:	b590      	push	{r4, r7, lr}
 80002a0:	b093      	sub	sp, #76	@ 0x4c
 80002a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a4:	2410      	movs	r4, #16
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	0018      	movs	r0, r3
 80002aa:	2338      	movs	r3, #56	@ 0x38
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f002 f900 	bl	80024b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	003b      	movs	r3, r7
 80002b6:	0018      	movs	r0, r3
 80002b8:	2310      	movs	r3, #16
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f002 f8f9 	bl	80024b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 faf0 	bl	80018ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2202      	movs	r2, #2
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	0052      	lsls	r2, r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2240      	movs	r2, #64	@ 0x40
 80002e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 fb1c 	bl	800192c <HAL_RCC_OscConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002f8:	f000 f89a 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	003b      	movs	r3, r7
 80002fe:	2207      	movs	r2, #7
 8000300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000314:	003b      	movs	r3, r7
 8000316:	2100      	movs	r1, #0
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fe21 	bl	8001f60 <HAL_RCC_ClockConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000322:	f000 f885 	bl	8000430 <Error_Handler>
  }
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b013      	add	sp, #76	@ 0x4c
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	0018      	movs	r0, r3
 800033a:	230c      	movs	r3, #12
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f002 f8b8 	bl	80024b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000344:	4b2d      	ldr	r3, [pc, #180]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000346:	4a2e      	ldr	r2, [pc, #184]	@ (8000400 <MX_ADC1_Init+0xd0>)
 8000348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800034a:	4b2c      	ldr	r3, [pc, #176]	@ (80003fc <MX_ADC1_Init+0xcc>)
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	05d2      	lsls	r2, r2, #23
 8000350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000352:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b28      	ldr	r3, [pc, #160]	@ (80003fc <MX_ADC1_Init+0xcc>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800035e:	4b27      	ldr	r3, [pc, #156]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000364:	4b25      	ldr	r3, [pc, #148]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000366:	2204      	movs	r2, #4
 8000368:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036a:	4b24      	ldr	r3, [pc, #144]	@ (80003fc <MX_ADC1_Init+0xcc>)
 800036c:	2200      	movs	r2, #0
 800036e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000370:	4b22      	ldr	r3, [pc, #136]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000372:	2200      	movs	r2, #0
 8000374:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000376:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800037c:	4b1f      	ldr	r3, [pc, #124]	@ (80003fc <MX_ADC1_Init+0xcc>)
 800037e:	2201      	movs	r2, #1
 8000380:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000384:	2220      	movs	r2, #32
 8000386:	2100      	movs	r1, #0
 8000388:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800038a:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <MX_ADC1_Init+0xcc>)
 800038c:	2200      	movs	r2, #0
 800038e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000390:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000392:	2200      	movs	r2, #0
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <MX_ADC1_Init+0xcc>)
 8000398:	222c      	movs	r2, #44	@ 0x2c
 800039a:	2100      	movs	r1, #0
 800039c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003b2:	223c      	movs	r2, #60	@ 0x3c
 80003b4:	2100      	movs	r1, #0
 80003b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003b8:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 fb67 	bl	8000a94 <HAL_ADC_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003ca:	f000 f831 	bl	8000430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2201      	movs	r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e0:	1d3a      	adds	r2, r7, #4
 80003e2:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_ADC1_Init+0xcc>)
 80003e4:	0011      	movs	r1, r2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fdea 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003f0:	f000 f81e 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000084 	.word	0x20000084
 8000400:	40012400 	.word	0x40012400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b08      	ldr	r3, [pc, #32]	@ (800042c <MX_GPIO_Init+0x28>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800040e:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_GPIO_Init+0x28>)
 8000410:	2101      	movs	r1, #1
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	@ 0x34
 8000416:	4b05      	ldr	r3, [pc, #20]	@ (800042c <MX_GPIO_Init+0x28>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800041a:	2201      	movs	r2, #1
 800041c:	4013      	ands	r3, r2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x44>)
 8000444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <HAL_MspInit+0x44>)
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	641a      	str	r2, [r3, #64]	@ 0x40
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x44>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	2201      	movs	r2, #1
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_MspInit+0x44>)
 800045c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <HAL_MspInit+0x44>)
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	0549      	lsls	r1, r1, #21
 8000464:	430a      	orrs	r2, r1
 8000466:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <HAL_MspInit+0x44>)
 800046a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	055b      	lsls	r3, r3, #21
 8000470:	4013      	ands	r3, r2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b08b      	sub	sp, #44	@ 0x2c
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	2414      	movs	r4, #20
 800048e:	193b      	adds	r3, r7, r4
 8000490:	0018      	movs	r0, r3
 8000492:	2314      	movs	r3, #20
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f002 f80c 	bl	80024b4 <memset>
  if(hadc->Instance==ADC1)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a18      	ldr	r2, [pc, #96]	@ (8000504 <HAL_ADC_MspInit+0x80>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d129      	bne.n	80004fa <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <HAL_ADC_MspInit+0x84>)
 80004a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <HAL_ADC_MspInit+0x84>)
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	0349      	lsls	r1, r1, #13
 80004b0:	430a      	orrs	r2, r1
 80004b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <HAL_ADC_MspInit+0x84>)
 80004b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	035b      	lsls	r3, r3, #13
 80004bc:	4013      	ands	r3, r2
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <HAL_ADC_MspInit+0x84>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <HAL_ADC_MspInit+0x84>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_ADC_MspInit+0x84>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2201      	movs	r2, #1
 80004de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2203      	movs	r2, #3
 80004e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	193a      	adds	r2, r7, r4
 80004ee:	23a0      	movs	r3, #160	@ 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 f875 	bl	80015e4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b00b      	add	sp, #44	@ 0x2c
 8000500:	bd90      	pop	{r4, r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	40012400 	.word	0x40012400
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	e7fd      	b.n	8000510 <NMI_Handler+0x4>

08000514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	e7fd      	b.n	8000518 <HardFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f938 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e00a      	b.n	8000566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000550:	e000      	b.n	8000554 <_read+0x16>
 8000552:	bf00      	nop
 8000554:	0001      	movs	r1, r0
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	60ba      	str	r2, [r7, #8]
 800055c:	b2ca      	uxtb	r2, r1
 800055e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3301      	adds	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbf0      	blt.n	8000550 <_read+0x12>
  }

  return len;
 800056e:	687b      	ldr	r3, [r7, #4]
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b006      	add	sp, #24
 8000576:	bd80      	pop	{r7, pc}

08000578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e009      	b.n	800059e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	60ba      	str	r2, [r7, #8]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	0018      	movs	r0, r3
 8000594:	e000      	b.n	8000598 <_write+0x20>
 8000596:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dbf1      	blt.n	800058a <_write+0x12>
  }
  return len;
 80005a6:	687b      	ldr	r3, [r7, #4]
}
 80005a8:	0018      	movs	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b006      	add	sp, #24
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <_close>:

int _close(int file)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	425b      	negs	r3, r3
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2280      	movs	r2, #128	@ 0x80
 80005d2:	0192      	lsls	r2, r2, #6
 80005d4:	605a      	str	r2, [r3, #4]
  return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_isatty>:

int _isatty(int file)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	0018      	movs	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b004      	add	sp, #16
 8000606:	bd80      	pop	{r7, pc}

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	@ (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	18d3      	adds	r3, r2, r3
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f001 ff92 	bl	8002560 <__errno>
 800063c:	0003      	movs	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	2301      	movs	r3, #1
 8000644:	425b      	negs	r3, r3
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	18d2      	adds	r2, r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <_sbrk+0x64>)
 8000658:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	b006      	add	sp, #24
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20009000 	.word	0x20009000
 8000668:	00000400 	.word	0x00000400
 800066c:	200000ec 	.word	0x200000ec
 8000670:	20000240 	.word	0x20000240

08000674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000684:	f7ff fff6 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	@ (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	@ (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f001 ff5d 	bl	800256c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006b2:	f7ff fde1 	bl	8000278 <main>

080006b6 <LoopForever>:

LoopForever:
  b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006c4:	080031ec 	.word	0x080031ec
  ldr r2, =_sbss
 80006c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006cc:	20000240 	.word	0x20000240

080006d0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_COMP_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <HAL_Init+0x3c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_Init+0x3c>)
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	0049      	lsls	r1, r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f810 	bl	8000714 <HAL_InitTick>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d003      	beq.n	8000700 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e001      	b.n	8000704 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fe9c 	bl	800043c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800071c:	230f      	movs	r3, #15
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <HAL_InitTick+0x88>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d02b      	beq.n	8000784 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <HAL_InitTick+0x8c>)
 800072e:	681c      	ldr	r4, [r3, #0]
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <HAL_InitTick+0x88>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	0019      	movs	r1, r3
 8000736:	23fa      	movs	r3, #250	@ 0xfa
 8000738:	0098      	lsls	r0, r3, #2
 800073a:	f7ff fced 	bl	8000118 <__udivsi3>
 800073e:	0003      	movs	r3, r0
 8000740:	0019      	movs	r1, r3
 8000742:	0020      	movs	r0, r4
 8000744:	f7ff fce8 	bl	8000118 <__udivsi3>
 8000748:	0003      	movs	r3, r0
 800074a:	0018      	movs	r0, r3
 800074c:	f000 ff3d 	bl	80015ca <HAL_SYSTICK_Config>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d112      	bne.n	800077a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d80a      	bhi.n	8000770 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	2200      	movs	r2, #0
 8000762:	0018      	movs	r0, r3
 8000764:	f000 ff1c 	bl	80015a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <HAL_InitTick+0x90>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e00d      	b.n	800078c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e008      	b.n	800078c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077a:	230f      	movs	r3, #15
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	e003      	b.n	800078c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000784:	230f      	movs	r3, #15
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b005      	add	sp, #20
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	18d2      	adds	r2, r2, r3
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <HAL_IncTick+0x20>)
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	20000008 	.word	0x20000008
 80007c8:	200000f0 	.word	0x200000f0

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	@ (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	200000f0 	.word	0x200000f0

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff fff0 	bl	80007cc <HAL_GetTick>
 80007ec:	0003      	movs	r3, r0
 80007ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	001a      	movs	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	189b      	adds	r3, r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	f7ff ffe0 	bl	80007cc <HAL_GetTick>
 800080c:	0002      	movs	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	20000008 	.word	0x20000008

08000828 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000838:	401a      	ands	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	fe3fffff 	.word	0xfe3fffff

08000850 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	23e0      	movs	r3, #224	@ 0xe0
 800085e:	045b      	lsls	r3, r3, #17
 8000860:	4013      	ands	r3, r2
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	2104      	movs	r1, #4
 800087e:	400a      	ands	r2, r1
 8000880:	2107      	movs	r1, #7
 8000882:	4091      	lsls	r1, r2
 8000884:	000a      	movs	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	401a      	ands	r2, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2104      	movs	r1, #4
 800088e:	400b      	ands	r3, r1
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4099      	lsls	r1, r3
 8000894:	000b      	movs	r3, r1
 8000896:	431a      	orrs	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b004      	add	sp, #16
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	2104      	movs	r1, #4
 80008b6:	400a      	ands	r2, r1
 80008b8:	2107      	movs	r1, #7
 80008ba:	4091      	lsls	r1, r2
 80008bc:	000a      	movs	r2, r1
 80008be:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2104      	movs	r1, #4
 80008c4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008c6:	40da      	lsrs	r2, r3
 80008c8:	0013      	movs	r3, r2
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	23c0      	movs	r3, #192	@ 0xc0
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4013      	ands	r3, r2
 80008e4:	d101      	bne.n	80008ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	211f      	movs	r1, #31
 8000908:	400a      	ands	r2, r1
 800090a:	210f      	movs	r1, #15
 800090c:	4091      	lsls	r1, r2
 800090e:	000a      	movs	r2, r1
 8000910:	43d2      	mvns	r2, r2
 8000912:	401a      	ands	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0e9b      	lsrs	r3, r3, #26
 8000918:	210f      	movs	r1, #15
 800091a:	4019      	ands	r1, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	201f      	movs	r0, #31
 8000920:	4003      	ands	r3, r0
 8000922:	4099      	lsls	r1, r3
 8000924:	000b      	movs	r3, r1
 8000926:	431a      	orrs	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}

08000934 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	035b      	lsls	r3, r3, #13
 8000946:	0b5b      	lsrs	r3, r3, #13
 8000948:	431a      	orrs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}

08000956 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	0352      	lsls	r2, r2, #13
 8000968:	0b52      	lsrs	r2, r2, #13
 800096a:	43d2      	mvns	r2, r2
 800096c:	401a      	ands	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	0212      	lsls	r2, r2, #8
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	400b      	ands	r3, r1
 800099c:	4904      	ldr	r1, [pc, #16]	@ (80009b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800099e:	400b      	ands	r3, r1
 80009a0:	431a      	orrs	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	07ffff00 	.word	0x07ffff00

080009b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80009c2:	4013      	ands	r3, r2
 80009c4:	2280      	movs	r2, #128	@ 0x80
 80009c6:	0552      	lsls	r2, r2, #21
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	6fffffe8 	.word	0x6fffffe8

080009dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	055b      	lsls	r3, r3, #21
 80009ec:	401a      	ands	r2, r3
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	055b      	lsls	r3, r3, #21
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d101      	bne.n	80009fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <LL_ADC_Enable+0x20>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	2201      	movs	r2, #1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	7fffffe8 	.word	0x7fffffe8

08000a28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2201      	movs	r2, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d101      	bne.n	8000a40 <LL_ADC_IsEnabled+0x18>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <LL_ADC_IsEnabled+0x1a>
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <LL_ADC_REG_StartConversion+0x20>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	7fffffe8 	.word	0x7fffffe8

08000a70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d101      	bne.n	8000a88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a9c:	231f      	movs	r3, #31
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e17f      	b.n	8000dba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10a      	bne.n	8000ad8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fcdd 	bl	8000484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2254      	movs	r2, #84	@ 0x54
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ff7d 	bl	80009dc <LL_ADC_IsInternalRegulatorEnabled>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d115      	bne.n	8000b12 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff ff62 	bl	80009b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000af0:	4bb4      	ldr	r3, [pc, #720]	@ (8000dc4 <HAL_ADC_Init+0x330>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	49b4      	ldr	r1, [pc, #720]	@ (8000dc8 <HAL_ADC_Init+0x334>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fb0e 	bl	8000118 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	3301      	adds	r3, #1
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b04:	e002      	b.n	8000b0c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f9      	bne.n	8000b06 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff ff60 	bl	80009dc <LL_ADC_IsInternalRegulatorEnabled>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d10f      	bne.n	8000b40 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b24:	2210      	movs	r2, #16
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b30:	2201      	movs	r2, #1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b38:	231f      	movs	r3, #31
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff93 	bl	8000a70 <LL_ADC_REG_IsConversionOngoing>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	2210      	movs	r2, #16
 8000b54:	4013      	ands	r3, r2
 8000b56:	d000      	beq.n	8000b5a <HAL_ADC_Init+0xc6>
 8000b58:	e122      	b.n	8000da0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d000      	beq.n	8000b62 <HAL_ADC_Init+0xce>
 8000b60:	e11e      	b.n	8000da0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	4a99      	ldr	r2, [pc, #612]	@ (8000dcc <HAL_ADC_Init+0x338>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ff56 	bl	8000a28 <LL_ADC_IsEnabled>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d000      	beq.n	8000b82 <HAL_ADC_Init+0xee>
 8000b80:	e0ad      	b.n	8000cde <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7e1b      	ldrb	r3, [r3, #24]
 8000b8a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000b8c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7e5b      	ldrb	r3, [r3, #25]
 8000b92:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000b94:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7e9b      	ldrb	r3, [r3, #26]
 8000b9a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000b9c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_ADC_Init+0x118>
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	015b      	lsls	r3, r3, #5
 8000baa:	e000      	b.n	8000bae <HAL_ADC_Init+0x11a>
 8000bac:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bae:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000bb4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da04      	bge.n	8000bc8 <HAL_ADC_Init+0x134>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	085b      	lsrs	r3, r3, #1
 8000bc6:	e001      	b.n	8000bcc <HAL_ADC_Init+0x138>
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000bcc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	212c      	movs	r1, #44	@ 0x2c
 8000bd2:	5c5b      	ldrb	r3, [r3, r1]
 8000bd4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bd6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2220      	movs	r2, #32
 8000be2:	5c9b      	ldrb	r3, [r3, r2]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d115      	bne.n	8000c14 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7e9b      	ldrb	r3, [r3, #26]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d105      	bne.n	8000bfc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	0252      	lsls	r2, r2, #9
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	e00b      	b.n	8000c14 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	2220      	movs	r2, #32
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00a      	beq.n	8000c32 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c20:	23e0      	movs	r3, #224	@ 0xe0
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a65      	ldr	r2, [pc, #404]	@ (8000dd0 <HAL_ADC_Init+0x33c>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0f9b      	lsrs	r3, r3, #30
 8000c4e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c54:	4313      	orrs	r3, r2
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	223c      	movs	r2, #60	@ 0x3c
 8000c60:	5c9b      	ldrb	r3, [r3, r2]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d111      	bne.n	8000c8a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	0f9b      	lsrs	r3, r3, #30
 8000c6c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c72:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000c78:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000c7e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	2201      	movs	r2, #1
 8000c86:	4313      	orrs	r3, r2
 8000c88:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	4a50      	ldr	r2, [pc, #320]	@ (8000dd4 <HAL_ADC_Init+0x340>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	0019      	movs	r1, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	23c0      	movs	r3, #192	@ 0xc0
 8000ca6:	061b      	lsls	r3, r3, #24
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d018      	beq.n	8000cde <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	05db      	lsls	r3, r3, #23
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d012      	beq.n	8000cde <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	061b      	lsls	r3, r3, #24
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d00c      	beq.n	8000cde <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000cc4:	4b44      	ldr	r3, [pc, #272]	@ (8000dd8 <HAL_ADC_Init+0x344>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <HAL_ADC_Init+0x348>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	0019      	movs	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	23f0      	movs	r3, #240	@ 0xf0
 8000cd4:	039b      	lsls	r3, r3, #14
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd8 <HAL_ADC_Init+0x344>)
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f7ff fdbe 	bl	800086a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf6:	493a      	ldr	r1, [pc, #232]	@ (8000de0 <HAL_ADC_Init+0x34c>)
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	f7ff fdb6 	bl	800086a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d109      	bne.n	8000d1a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2110      	movs	r1, #16
 8000d12:	4249      	negs	r1, r1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d18:	e018      	b.n	8000d4c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	2380      	movs	r3, #128	@ 0x80
 8000d20:	039b      	lsls	r3, r3, #14
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d112      	bne.n	8000d4c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	221c      	movs	r2, #28
 8000d36:	4013      	ands	r3, r2
 8000d38:	2210      	movs	r2, #16
 8000d3a:	4252      	negs	r2, r2
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0011      	movs	r1, r2
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2100      	movs	r1, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fda6 	bl	80008a4 <LL_ADC_GetSamplingTimeCommonChannels>
 8000d58:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d10b      	bne.n	8000d7a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4393      	bics	r3, r2
 8000d70:	2201      	movs	r2, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d78:	e01c      	b.n	8000db4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	2212      	movs	r2, #18
 8000d80:	4393      	bics	r3, r2
 8000d82:	2210      	movs	r2, #16
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d8e:	2201      	movs	r2, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000d96:	231f      	movs	r3, #31
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d9e:	e009      	b.n	8000db4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da4:	2210      	movs	r2, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000dac:	231f      	movs	r3, #31
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000db4:	231f      	movs	r3, #31
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b008      	add	sp, #32
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	00030d40 	.word	0x00030d40
 8000dcc:	fffffefd 	.word	0xfffffefd
 8000dd0:	ffde0201 	.word	0xffde0201
 8000dd4:	1ffffc02 	.word	0x1ffffc02
 8000dd8:	40012708 	.word	0x40012708
 8000ddc:	ffc3ffff 	.word	0xffc3ffff
 8000de0:	07ffff04 	.word	0x07ffff04

08000de4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fe3d 	bl	8000a70 <LL_ADC_REG_IsConversionOngoing>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d135      	bne.n	8000e66 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2254      	movs	r2, #84	@ 0x54
 8000dfe:	5c9b      	ldrb	r3, [r3, r2]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ADC_Start+0x24>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e035      	b.n	8000e74 <HAL_ADC_Start+0x90>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2254      	movs	r2, #84	@ 0x54
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e10:	250f      	movs	r5, #15
 8000e12:	197c      	adds	r4, r7, r5
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 faaa 	bl	8001370 <ADC_Enable>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e20:	197b      	adds	r3, r7, r5
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d119      	bne.n	8000e5c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <HAL_ADC_Start+0x98>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	0052      	lsls	r2, r2, #1
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	221c      	movs	r2, #28
 8000e46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2254      	movs	r2, #84	@ 0x54
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff fdf9 	bl	8000a4c <LL_ADC_REG_StartConversion>
 8000e5a:	e008      	b.n	8000e6e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2254      	movs	r2, #84	@ 0x54
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]
 8000e64:	e003      	b.n	8000e6e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e66:	230f      	movs	r3, #15
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7c:	fffff0fe 	.word	0xfffff0fe

08000e80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d102      	bne.n	8000e98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8000e92:	2308      	movs	r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e00f      	b.n	8000eb8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e072      	b.n	8000f9a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff fc88 	bl	80007cc <HAL_GetTick>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000ec0:	e01f      	b.n	8000f02 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	d01c      	beq.n	8000f02 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000ec8:	f7ff fc80 	bl	80007cc <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d302      	bcc.n	8000ede <HAL_ADC_PollForConversion+0x5e>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d111      	bne.n	8000f02 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d10b      	bne.n	8000f02 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	2204      	movs	r2, #4
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2254      	movs	r2, #84	@ 0x54
 8000efa:	2100      	movs	r1, #0
 8000efc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e04b      	b.n	8000f9a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d0d9      	beq.n	8000ec2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff fcd6 	bl	80008d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d02e      	beq.n	8000f88 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e9b      	ldrb	r3, [r3, #26]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d12a      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2208      	movs	r2, #8
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d123      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fd93 	bl	8000a70 <LL_ADC_REG_IsConversionOngoing>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d110      	bne.n	8000f70 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	210c      	movs	r1, #12
 8000f5a:	438a      	bics	r2, r1
 8000f5c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_ADC_PollForConversion+0x124>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	2201      	movs	r2, #1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8000f6e:	e00b      	b.n	8000f88 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f74:	2220      	movs	r2, #32
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f80:	2201      	movs	r2, #1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7e1b      	ldrb	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	220c      	movs	r2, #12
 8000f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	fffffefe 	.word	0xfffffefe

08000fa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fca:	2317      	movs	r3, #23
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2254      	movs	r2, #84	@ 0x54
 8000fda:	5c9b      	ldrb	r3, [r3, r2]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x24>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e1c0      	b.n	8001366 <HAL_ADC_ConfigChannel+0x3a6>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2254      	movs	r2, #84	@ 0x54
 8000fe8:	2101      	movs	r1, #1
 8000fea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff fd3d 	bl	8000a70 <LL_ADC_REG_IsConversionOngoing>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d000      	beq.n	8000ffc <HAL_ADC_ConfigChannel+0x3c>
 8000ffa:	e1a3      	b.n	8001344 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d100      	bne.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8001004:	e143      	b.n	800128e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	2380      	movs	r3, #128	@ 0x80
 800100c:	061b      	lsls	r3, r3, #24
 800100e:	429a      	cmp	r2, r3
 8001010:	d004      	beq.n	800101c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001016:	4ac1      	ldr	r2, [pc, #772]	@ (800131c <HAL_ADC_ConfigChannel+0x35c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d108      	bne.n	800102e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0019      	movs	r1, r3
 8001026:	0010      	movs	r0, r2
 8001028:	f7ff fc84 	bl	8000934 <LL_ADC_REG_SetSequencerChAdd>
 800102c:	e0c9      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	211f      	movs	r1, #31
 8001038:	400b      	ands	r3, r1
 800103a:	210f      	movs	r1, #15
 800103c:	4099      	lsls	r1, r3
 800103e:	000b      	movs	r3, r1
 8001040:	43db      	mvns	r3, r3
 8001042:	4013      	ands	r3, r2
 8001044:	0019      	movs	r1, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	035b      	lsls	r3, r3, #13
 800104c:	0b5b      	lsrs	r3, r3, #13
 800104e:	d105      	bne.n	800105c <HAL_ADC_ConfigChannel+0x9c>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0e9b      	lsrs	r3, r3, #26
 8001056:	221f      	movs	r2, #31
 8001058:	4013      	ands	r3, r2
 800105a:	e098      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	4013      	ands	r3, r2
 8001064:	d000      	beq.n	8001068 <HAL_ADC_ConfigChannel+0xa8>
 8001066:	e091      	b.n	800118c <HAL_ADC_ConfigChannel+0x1cc>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2202      	movs	r2, #2
 800106e:	4013      	ands	r3, r2
 8001070:	d000      	beq.n	8001074 <HAL_ADC_ConfigChannel+0xb4>
 8001072:	e089      	b.n	8001188 <HAL_ADC_ConfigChannel+0x1c8>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2204      	movs	r2, #4
 800107a:	4013      	ands	r3, r2
 800107c:	d000      	beq.n	8001080 <HAL_ADC_ConfigChannel+0xc0>
 800107e:	e081      	b.n	8001184 <HAL_ADC_ConfigChannel+0x1c4>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2208      	movs	r2, #8
 8001086:	4013      	ands	r3, r2
 8001088:	d000      	beq.n	800108c <HAL_ADC_ConfigChannel+0xcc>
 800108a:	e079      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1c0>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2210      	movs	r2, #16
 8001092:	4013      	ands	r3, r2
 8001094:	d000      	beq.n	8001098 <HAL_ADC_ConfigChannel+0xd8>
 8001096:	e071      	b.n	800117c <HAL_ADC_ConfigChannel+0x1bc>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2220      	movs	r2, #32
 800109e:	4013      	ands	r3, r2
 80010a0:	d000      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0xe4>
 80010a2:	e069      	b.n	8001178 <HAL_ADC_ConfigChannel+0x1b8>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2240      	movs	r2, #64	@ 0x40
 80010aa:	4013      	ands	r3, r2
 80010ac:	d000      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0xf0>
 80010ae:	e061      	b.n	8001174 <HAL_ADC_ConfigChannel+0x1b4>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2280      	movs	r2, #128	@ 0x80
 80010b6:	4013      	ands	r3, r2
 80010b8:	d000      	beq.n	80010bc <HAL_ADC_ConfigChannel+0xfc>
 80010ba:	e059      	b.n	8001170 <HAL_ADC_ConfigChannel+0x1b0>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d151      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1ac>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d149      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1a8>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4013      	ands	r3, r2
 80010de:	d141      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1a4>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d139      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1a0>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	4013      	ands	r3, r2
 80010f6:	d131      	bne.n	800115c <HAL_ADC_ConfigChannel+0x19c>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	019b      	lsls	r3, r3, #6
 8001100:	4013      	ands	r3, r2
 8001102:	d129      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x198>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	01db      	lsls	r3, r3, #7
 800110c:	4013      	ands	r3, r2
 800110e:	d121      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x194>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	4013      	ands	r3, r2
 800111a:	d119      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x190>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	4013      	ands	r3, r2
 8001126:	d111      	bne.n	800114c <HAL_ADC_ConfigChannel+0x18c>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d109      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x188>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	02db      	lsls	r3, r3, #11
 800113c:	4013      	ands	r3, r2
 800113e:	d001      	beq.n	8001144 <HAL_ADC_ConfigChannel+0x184>
 8001140:	2312      	movs	r3, #18
 8001142:	e024      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001144:	2300      	movs	r3, #0
 8001146:	e022      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001148:	2311      	movs	r3, #17
 800114a:	e020      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 800114c:	2310      	movs	r3, #16
 800114e:	e01e      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001150:	230f      	movs	r3, #15
 8001152:	e01c      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001154:	230e      	movs	r3, #14
 8001156:	e01a      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001158:	230d      	movs	r3, #13
 800115a:	e018      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 800115c:	230c      	movs	r3, #12
 800115e:	e016      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001160:	230b      	movs	r3, #11
 8001162:	e014      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001164:	230a      	movs	r3, #10
 8001166:	e012      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001168:	2309      	movs	r3, #9
 800116a:	e010      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 800116c:	2308      	movs	r3, #8
 800116e:	e00e      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001170:	2307      	movs	r3, #7
 8001172:	e00c      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001174:	2306      	movs	r3, #6
 8001176:	e00a      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001178:	2305      	movs	r3, #5
 800117a:	e008      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 800117c:	2304      	movs	r3, #4
 800117e:	e006      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001180:	2303      	movs	r3, #3
 8001182:	e004      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 800118c:	2300      	movs	r3, #0
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	6852      	ldr	r2, [r2, #4]
 8001192:	201f      	movs	r0, #31
 8001194:	4002      	ands	r2, r0
 8001196:	4093      	lsls	r3, r2
 8001198:	000a      	movs	r2, r1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d808      	bhi.n	80011c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	f7ff fb99 	bl	80008f4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	6819      	ldr	r1, [r3, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	001a      	movs	r2, r3
 80011d0:	f7ff fbd4 	bl	800097c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db00      	blt.n	80011de <HAL_ADC_ConfigChannel+0x21e>
 80011dc:	e0bc      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011de:	4b50      	ldr	r3, [pc, #320]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fb35 	bl	8000850 <LL_ADC_GetCommonPathInternalCh>
 80011e6:	0003      	movs	r3, r0
 80011e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_ADC_ConfigChannel+0x364>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d122      	bne.n	800123a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011fc:	d11d      	bne.n	800123a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	4313      	orrs	r3, r2
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 8001208:	0019      	movs	r1, r3
 800120a:	0010      	movs	r0, r2
 800120c:	f7ff fb0c 	bl	8000828 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001210:	4b45      	ldr	r3, [pc, #276]	@ (8001328 <HAL_ADC_ConfigChannel+0x368>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4945      	ldr	r1, [pc, #276]	@ (800132c <HAL_ADC_ConfigChannel+0x36c>)
 8001216:	0018      	movs	r0, r3
 8001218:	f7fe ff7e 	bl	8000118 <__udivsi3>
 800121c:	0003      	movs	r3, r0
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	0013      	movs	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	189b      	adds	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800122a:	e002      	b.n	8001232 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3b01      	subs	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f9      	bne.n	800122c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001238:	e08e      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a3c      	ldr	r2, [pc, #240]	@ (8001330 <HAL_ADC_ConfigChannel+0x370>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d10e      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	045b      	lsls	r3, r3, #17
 800124a:	4013      	ands	r3, r2
 800124c:	d109      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2280      	movs	r2, #128	@ 0x80
 8001252:	0452      	lsls	r2, r2, #17
 8001254:	4313      	orrs	r3, r2
 8001256:	4a32      	ldr	r2, [pc, #200]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 8001258:	0019      	movs	r1, r3
 800125a:	0010      	movs	r0, r2
 800125c:	f7ff fae4 	bl	8000828 <LL_ADC_SetCommonPathInternalCh>
 8001260:	e07a      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a33      	ldr	r2, [pc, #204]	@ (8001334 <HAL_ADC_ConfigChannel+0x374>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d000      	beq.n	800126e <HAL_ADC_ConfigChannel+0x2ae>
 800126c:	e074      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	03db      	lsls	r3, r3, #15
 8001274:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001276:	d000      	beq.n	800127a <HAL_ADC_ConfigChannel+0x2ba>
 8001278:	e06e      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	03d2      	lsls	r2, r2, #15
 8001280:	4313      	orrs	r3, r2
 8001282:	4a27      	ldr	r2, [pc, #156]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 8001284:	0019      	movs	r1, r3
 8001286:	0010      	movs	r0, r2
 8001288:	f7ff face 	bl	8000828 <LL_ADC_SetCommonPathInternalCh>
 800128c:	e064      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	2380      	movs	r3, #128	@ 0x80
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	429a      	cmp	r2, r3
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800129e:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <HAL_ADC_ConfigChannel+0x35c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d107      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0019      	movs	r1, r3
 80012ae:	0010      	movs	r0, r2
 80012b0:	f7ff fb51 	bl	8000956 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da4d      	bge.n	8001358 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fac6 	bl	8000850 <LL_ADC_GetCommonPathInternalCh>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_ADC_ConfigChannel+0x364>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d108      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_ADC_ConfigChannel+0x378>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 80012da:	0019      	movs	r1, r3
 80012dc:	0010      	movs	r0, r2
 80012de:	f7ff faa3 	bl	8000828 <LL_ADC_SetCommonPathInternalCh>
 80012e2:	e039      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <HAL_ADC_ConfigChannel+0x370>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d108      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <HAL_ADC_ConfigChannel+0x37c>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 80012f6:	0019      	movs	r1, r3
 80012f8:	0010      	movs	r0, r2
 80012fa:	f7ff fa95 	bl	8000828 <LL_ADC_SetCommonPathInternalCh>
 80012fe:	e02b      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <HAL_ADC_ConfigChannel+0x374>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d126      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4a0c      	ldr	r2, [pc, #48]	@ (8001340 <HAL_ADC_ConfigChannel+0x380>)
 800130e:	4013      	ands	r3, r2
 8001310:	4a03      	ldr	r2, [pc, #12]	@ (8001320 <HAL_ADC_ConfigChannel+0x360>)
 8001312:	0019      	movs	r1, r3
 8001314:	0010      	movs	r0, r2
 8001316:	f7ff fa87 	bl	8000828 <LL_ADC_SetCommonPathInternalCh>
 800131a:	e01d      	b.n	8001358 <HAL_ADC_ConfigChannel+0x398>
 800131c:	80000004 	.word	0x80000004
 8001320:	40012708 	.word	0x40012708
 8001324:	b0001000 	.word	0xb0001000
 8001328:	20000000 	.word	0x20000000
 800132c:	00030d40 	.word	0x00030d40
 8001330:	b8004000 	.word	0xb8004000
 8001334:	b4002000 	.word	0xb4002000
 8001338:	ff7fffff 	.word	0xff7fffff
 800133c:	feffffff 	.word	0xfeffffff
 8001340:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001348:	2220      	movs	r2, #32
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001350:	2317      	movs	r3, #23
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2254      	movs	r2, #84	@ 0x54
 800135c:	2100      	movs	r1, #0
 800135e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001360:	2317      	movs	r3, #23
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	781b      	ldrb	r3, [r3, #0]
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b006      	add	sp, #24
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			@ (mov r8, r8)

08001370 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fb51 	bl	8000a28 <LL_ADC_IsEnabled>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d000      	beq.n	800138c <ADC_Enable+0x1c>
 800138a:	e069      	b.n	8001460 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4a36      	ldr	r2, [pc, #216]	@ (800146c <ADC_Enable+0xfc>)
 8001394:	4013      	ands	r3, r2
 8001396:	d00d      	beq.n	80013b4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	2210      	movs	r2, #16
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a8:	2201      	movs	r2, #1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e056      	b.n	8001462 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fb23 	bl	8000a04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80013be:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <ADC_Enable+0x100>)
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fa45 	bl	8000850 <LL_ADC_GetCommonPathInternalCh>
 80013c6:	0002      	movs	r2, r0
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	4013      	ands	r3, r2
 80013ce:	d00f      	beq.n	80013f0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <ADC_Enable+0x104>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4928      	ldr	r1, [pc, #160]	@ (8001478 <ADC_Enable+0x108>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7fe fe9e 	bl	8000118 <__udivsi3>
 80013dc:	0003      	movs	r3, r0
 80013de:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80013e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013e2:	e002      	b.n	80013ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e5b      	ldrb	r3, [r3, #25]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d033      	beq.n	8001460 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80013f8:	f7ff f9e8 	bl	80007cc <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001400:	e027      	b.n	8001452 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff fb0e 	bl	8000a28 <LL_ADC_IsEnabled>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d104      	bne.n	800141a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff faf5 	bl	8000a04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800141a:	f7ff f9d7 	bl	80007cc <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d914      	bls.n	8001452 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	2b01      	cmp	r3, #1
 8001434:	d00d      	beq.n	8001452 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	2210      	movs	r2, #16
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001446:	2201      	movs	r2, #1
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e007      	b.n	8001462 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	2b01      	cmp	r3, #1
 800145e:	d1d0      	bne.n	8001402 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	80000017 	.word	0x80000017
 8001470:	40012708 	.word	0x40012708
 8001474:	20000000 	.word	0x20000000
 8001478:	00030d40 	.word	0x00030d40

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	0002      	movs	r2, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001490:	d828      	bhi.n	80014e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001492:	4a2f      	ldr	r2, [pc, #188]	@ (8001550 <__NVIC_SetPriority+0xd4>)
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	33c0      	adds	r3, #192	@ 0xc0
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	589b      	ldr	r3, [r3, r2]
 80014a2:	1dfa      	adds	r2, r7, #7
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	0011      	movs	r1, r2
 80014a8:	2203      	movs	r2, #3
 80014aa:	400a      	ands	r2, r1
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	21ff      	movs	r1, #255	@ 0xff
 80014b0:	4091      	lsls	r1, r2
 80014b2:	000a      	movs	r2, r1
 80014b4:	43d2      	mvns	r2, r2
 80014b6:	401a      	ands	r2, r3
 80014b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	22ff      	movs	r2, #255	@ 0xff
 80014c0:	401a      	ands	r2, r3
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	4003      	ands	r3, r0
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d0:	481f      	ldr	r0, [pc, #124]	@ (8001550 <__NVIC_SetPriority+0xd4>)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	430a      	orrs	r2, r1
 80014dc:	33c0      	adds	r3, #192	@ 0xc0
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014e2:	e031      	b.n	8001548 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <__NVIC_SetPriority+0xd8>)
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	0019      	movs	r1, r3
 80014ec:	230f      	movs	r3, #15
 80014ee:	400b      	ands	r3, r1
 80014f0:	3b08      	subs	r3, #8
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3306      	adds	r3, #6
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	3304      	adds	r3, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1dfa      	adds	r2, r7, #7
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	0011      	movs	r1, r2
 8001504:	2203      	movs	r2, #3
 8001506:	400a      	ands	r2, r1
 8001508:	00d2      	lsls	r2, r2, #3
 800150a:	21ff      	movs	r1, #255	@ 0xff
 800150c:	4091      	lsls	r1, r2
 800150e:	000a      	movs	r2, r1
 8001510:	43d2      	mvns	r2, r2
 8001512:	401a      	ands	r2, r3
 8001514:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	019b      	lsls	r3, r3, #6
 800151a:	22ff      	movs	r2, #255	@ 0xff
 800151c:	401a      	ands	r2, r3
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	0018      	movs	r0, r3
 8001524:	2303      	movs	r3, #3
 8001526:	4003      	ands	r3, r0
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	4809      	ldr	r0, [pc, #36]	@ (8001554 <__NVIC_SetPriority+0xd8>)
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	001c      	movs	r4, r3
 8001534:	230f      	movs	r3, #15
 8001536:	4023      	ands	r3, r4
 8001538:	3b08      	subs	r3, #8
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	430a      	orrs	r2, r1
 800153e:	3306      	adds	r3, #6
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	18c3      	adds	r3, r0, r3
 8001544:	3304      	adds	r3, #4
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b003      	add	sp, #12
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1e5a      	subs	r2, r3, #1
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	045b      	lsls	r3, r3, #17
 8001568:	429a      	cmp	r2, r3
 800156a:	d301      	bcc.n	8001570 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156c:	2301      	movs	r3, #1
 800156e:	e010      	b.n	8001592 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <SysTick_Config+0x44>)
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	3a01      	subs	r2, #1
 8001576:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001578:	2301      	movs	r3, #1
 800157a:	425b      	negs	r3, r3
 800157c:	2103      	movs	r1, #3
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff ff7c 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <SysTick_Config+0x44>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	@ (800159c <SysTick_Config+0x44>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	210f      	movs	r1, #15
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ffbf 	bl	8001558 <SysTick_Config>
 80015da:	0003      	movs	r3, r0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f2:	e147      	b.n	8001884 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <HAL_GPIO_Init+0x28>
 800160a:	e138      	b.n	800187e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	4013      	ands	r3, r2
 8001614:	2b01      	cmp	r3, #1
 8001616:	d005      	beq.n	8001624 <HAL_GPIO_Init+0x40>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2203      	movs	r2, #3
 800161e:	4013      	ands	r3, r2
 8001620:	2b02      	cmp	r3, #2
 8001622:	d130      	bne.n	8001686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	409a      	lsls	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	43da      	mvns	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	409a      	lsls	r2, r3
 8001646:	0013      	movs	r3, r2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800165a:	2201      	movs	r2, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	2201      	movs	r2, #1
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	4013      	ands	r3, r2
 800168e:	2b03      	cmp	r3, #3
 8001690:	d017      	beq.n	80016c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2203      	movs	r2, #3
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d123      	bne.n	8001716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	58d3      	ldr	r3, [r2, r3]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2207      	movs	r2, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2107      	movs	r1, #7
 80016fa:	400b      	ands	r3, r1
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	6939      	ldr	r1, [r7, #16]
 8001714:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	401a      	ands	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	23c0      	movs	r3, #192	@ 0xc0
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	d100      	bne.n	8001758 <HAL_GPIO_Init+0x174>
 8001756:	e092      	b.n	800187e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001758:	4a50      	ldr	r2, [pc, #320]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3318      	adds	r3, #24
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	589b      	ldr	r3, [r3, r2]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	220f      	movs	r2, #15
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	23a0      	movs	r3, #160	@ 0xa0
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	429a      	cmp	r2, r3
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x1ca>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a45      	ldr	r2, [pc, #276]	@ (80018a0 <HAL_GPIO_Init+0x2bc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x1c6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a44      	ldr	r2, [pc, #272]	@ (80018a4 <HAL_GPIO_Init+0x2c0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x1c2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a43      	ldr	r2, [pc, #268]	@ (80018a8 <HAL_GPIO_Init+0x2c4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x1be>
 800179e:	2303      	movs	r3, #3
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x1cc>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e004      	b.n	80017b0 <HAL_GPIO_Init+0x1cc>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_Init+0x1cc>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x1cc>
 80017ae:	2300      	movs	r3, #0
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	2103      	movs	r1, #3
 80017b4:	400a      	ands	r2, r1
 80017b6:	00d2      	lsls	r2, r2, #3
 80017b8:	4093      	lsls	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017c0:	4936      	ldr	r1, [pc, #216]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3318      	adds	r3, #24
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ce:	4b33      	ldr	r3, [pc, #204]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	035b      	lsls	r3, r3, #13
 80017e6:	4013      	ands	r3, r2
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017f8:	4b28      	ldr	r3, [pc, #160]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43da      	mvns	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	039b      	lsls	r3, r3, #14
 8001810:	4013      	ands	r3, r2
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001822:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 8001824:	2384      	movs	r3, #132	@ 0x84
 8001826:	58d3      	ldr	r3, [r2, r3]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43da      	mvns	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	4013      	ands	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001848:	4914      	ldr	r1, [pc, #80]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 800184a:	2284      	movs	r2, #132	@ 0x84
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001850:	4a12      	ldr	r2, [pc, #72]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	58d3      	ldr	r3, [r2, r3]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	2380      	movs	r3, #128	@ 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001876:	4909      	ldr	r1, [pc, #36]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	40da      	lsrs	r2, r3
 800188c:	1e13      	subs	r3, r2, #0
 800188e:	d000      	beq.n	8001892 <HAL_GPIO_Init+0x2ae>
 8001890:	e6b0      	b.n	80015f4 <HAL_GPIO_Init+0x10>
  }
}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b006      	add	sp, #24
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021800 	.word	0x40021800
 80018a0:	50000400 	.word	0x50000400
 80018a4:	50000800 	.word	0x50000800
 80018a8:	50000c00 	.word	0x50000c00

080018ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d11f      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	0013      	movs	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4912      	ldr	r1, [pc, #72]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f7fe fc1a 	bl	8000118 <__udivsi3>
 80018e4:	0003      	movs	r3, r0
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ea:	e008      	b.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e001      	b.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e009      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	401a      	ands	r2, r3
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	429a      	cmp	r2, r3
 800190e:	d0ed      	beq.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	40007000 	.word	0x40007000
 8001920:	fffff9ff 	.word	0xfffff9ff
 8001924:	20000000 	.word	0x20000000
 8001928:	000f4240 	.word	0x000f4240

0800192c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e2fe      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x1e>
 8001948:	e07c      	b.n	8001a44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194a:	4bc3      	ldr	r3, [pc, #780]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	@ 0x38
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001954:	4bc0      	ldr	r3, [pc, #768]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2203      	movs	r2, #3
 800195a:	4013      	ands	r3, r2
 800195c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b10      	cmp	r3, #16
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x3e>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d002      	beq.n	8001970 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d10b      	bne.n	8001988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	4bb9      	ldr	r3, [pc, #740]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	4013      	ands	r3, r2
 800197a:	d062      	beq.n	8001a42 <HAL_RCC_OscConfig+0x116>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d15e      	bne.n	8001a42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e2d9      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x78>
 8001994:	4bb0      	ldr	r3, [pc, #704]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4baf      	ldr	r3, [pc, #700]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	0249      	lsls	r1, r1, #9
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e020      	b.n	80019e6 <HAL_RCC_OscConfig+0xba>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	23a0      	movs	r3, #160	@ 0xa0
 80019aa:	02db      	lsls	r3, r3, #11
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10e      	bne.n	80019ce <HAL_RCC_OscConfig+0xa2>
 80019b0:	4ba9      	ldr	r3, [pc, #676]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	02c9      	lsls	r1, r1, #11
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	4ba6      	ldr	r3, [pc, #664]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4ba5      	ldr	r3, [pc, #660]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	2180      	movs	r1, #128	@ 0x80
 80019c6:	0249      	lsls	r1, r1, #9
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e00b      	b.n	80019e6 <HAL_RCC_OscConfig+0xba>
 80019ce:	4ba2      	ldr	r3, [pc, #648]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	49a1      	ldr	r1, [pc, #644]	@ (8001c5c <HAL_RCC_OscConfig+0x330>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	4b9f      	ldr	r3, [pc, #636]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b9e      	ldr	r3, [pc, #632]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	499f      	ldr	r1, [pc, #636]	@ (8001c60 <HAL_RCC_OscConfig+0x334>)
 80019e2:	400a      	ands	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d014      	beq.n	8001a18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe feed 	bl	80007cc <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7fe fee8 	bl	80007cc <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e298      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4b93      	ldr	r3, [pc, #588]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	029b      	lsls	r3, r3, #10
 8001a12:	4013      	ands	r3, r2
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xcc>
 8001a16:	e015      	b.n	8001a44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7fe fed8 	bl	80007cc <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a22:	f7fe fed3 	bl	80007cc <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	@ 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e283      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a34:	4b88      	ldr	r3, [pc, #544]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0xf6>
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x124>
 8001a4e:	e099      	b.n	8001b84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a50:	4b81      	ldr	r3, [pc, #516]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2238      	movs	r2, #56	@ 0x38
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_OscConfig+0x144>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d002      	beq.n	8001a76 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d135      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a76:	4b78      	ldr	r3, [pc, #480]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x162>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e256      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b72      	ldr	r3, [pc, #456]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a74      	ldr	r2, [pc, #464]	@ (8001c64 <HAL_RCC_OscConfig+0x338>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	021a      	lsls	r2, r3, #8
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d112      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aaa:	4b6b      	ldr	r3, [pc, #428]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6e      	ldr	r2, [pc, #440]	@ (8001c68 <HAL_RCC_OscConfig+0x33c>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	4b67      	ldr	r3, [pc, #412]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001abe:	4b66      	ldr	r3, [pc, #408]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	4a68      	ldr	r2, [pc, #416]	@ (8001c6c <HAL_RCC_OscConfig+0x340>)
 8001aca:	40da      	lsrs	r2, r3
 8001acc:	4b68      	ldr	r3, [pc, #416]	@ (8001c70 <HAL_RCC_OscConfig+0x344>)
 8001ace:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ad0:	4b68      	ldr	r3, [pc, #416]	@ (8001c74 <HAL_RCC_OscConfig+0x348>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7fe fe1d 	bl	8000714 <HAL_InitTick>
 8001ada:	1e03      	subs	r3, r0, #0
 8001adc:	d051      	beq.n	8001b82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e22c      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d030      	beq.n	8001b4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aea:	4b5b      	ldr	r3, [pc, #364]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5e      	ldr	r2, [pc, #376]	@ (8001c68 <HAL_RCC_OscConfig+0x33c>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	4b57      	ldr	r3, [pc, #348]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001afe:	4b56      	ldr	r3, [pc, #344]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b55      	ldr	r3, [pc, #340]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	0049      	lsls	r1, r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7fe fe5e 	bl	80007cc <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7fe fe59 	bl	80007cc <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e209      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b28:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b48      	ldr	r3, [pc, #288]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	@ (8001c64 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e01b      	b.n	8001b84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b4c:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b52:	4949      	ldr	r1, [pc, #292]	@ (8001c78 <HAL_RCC_OscConfig+0x34c>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7fe fe38 	bl	80007cc <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b62:	f7fe fe33 	bl	80007cc <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1e3      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b74:	4b38      	ldr	r3, [pc, #224]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x236>
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2208      	movs	r2, #8
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d047      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b8e:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2238      	movs	r2, #56	@ 0x38
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b18      	cmp	r3, #24
 8001b98:	d10a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d03c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d138      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e1c5      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d019      	beq.n	8001bec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bb8:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bbc:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fe02 	bl	80007cc <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7fe fdfd 	bl	80007cc <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1ad      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0f1      	beq.n	8001bce <HAL_RCC_OscConfig+0x2a2>
 8001bea:	e018      	b.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bec:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fde8 	bl	80007cc <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe fde3 	bl	80007cc <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e193      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2fe>
 8001c28:	e0c6      	b.n	8001db8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	231f      	movs	r3, #31
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2238      	movs	r2, #56	@ 0x38
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d11e      	bne.n	8001c7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCC_OscConfig+0x31e>
 8001c48:	e0b6      	b.n	8001db8 <HAL_RCC_OscConfig+0x48c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d000      	beq.n	8001c54 <HAL_RCC_OscConfig+0x328>
 8001c52:	e0b1      	b.n	8001db8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e171      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	fffeffff 	.word	0xfffeffff
 8001c60:	fffbffff 	.word	0xfffbffff
 8001c64:	ffff80ff 	.word	0xffff80ff
 8001c68:	ffffc7ff 	.word	0xffffc7ff
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004
 8001c78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c7c:	4bb1      	ldr	r3, [pc, #708]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	055b      	lsls	r3, r3, #21
 8001c84:	4013      	ands	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_OscConfig+0x360>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x362>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d011      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	4bac      	ldr	r3, [pc, #688]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c96:	4bab      	ldr	r3, [pc, #684]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0549      	lsls	r1, r1, #21
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ca0:	4ba8      	ldr	r3, [pc, #672]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	055b      	lsls	r3, r3, #21
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001cae:	231f      	movs	r3, #31
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8001f48 <HAL_RCC_OscConfig+0x61c>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d11a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8001f48 <HAL_RCC_OscConfig+0x61c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4ba0      	ldr	r3, [pc, #640]	@ (8001f48 <HAL_RCC_OscConfig+0x61c>)
 8001cc8:	2180      	movs	r1, #128	@ 0x80
 8001cca:	0049      	lsls	r1, r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fd7c 	bl	80007cc <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7fe fd77 	bl	80007cc <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e127      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cec:	4b96      	ldr	r3, [pc, #600]	@ (8001f48 <HAL_RCC_OscConfig+0x61c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3e2>
 8001d00:	4b90      	ldr	r3, [pc, #576]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d04:	4b8f      	ldr	r3, [pc, #572]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x41c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x404>
 8001d16:	4b8b      	ldr	r3, [pc, #556]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d1a:	4b8a      	ldr	r3, [pc, #552]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d22:	4b88      	ldr	r3, [pc, #544]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d26:	4b87      	ldr	r3, [pc, #540]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0x41c>
 8001d30:	4b84      	ldr	r3, [pc, #528]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d34:	4b83      	ldr	r3, [pc, #524]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	438a      	bics	r2, r1
 8001d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d3c:	4b81      	ldr	r3, [pc, #516]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d40:	4b80      	ldr	r3, [pc, #512]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d42:	2104      	movs	r1, #4
 8001d44:	438a      	bics	r2, r1
 8001d46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d014      	beq.n	8001d7a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fd3c 	bl	80007cc <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fd37 	bl	80007cc <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a79      	ldr	r2, [pc, #484]	@ (8001f4c <HAL_RCC_OscConfig+0x620>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0e6      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6e:	4b75      	ldr	r3, [pc, #468]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x42e>
 8001d78:	e013      	b.n	8001da2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fd27 	bl	80007cc <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d82:	e009      	b.n	8001d98 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe fd22 	bl	80007cc <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	4a6f      	ldr	r2, [pc, #444]	@ (8001f4c <HAL_RCC_OscConfig+0x620>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0d1      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d98:	4b6a      	ldr	r3, [pc, #424]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001da2:	231f      	movs	r3, #31
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dac:	4b65      	ldr	r3, [pc, #404]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001db0:	4b64      	ldr	r3, [pc, #400]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001db2:	4967      	ldr	r1, [pc, #412]	@ (8001f50 <HAL_RCC_OscConfig+0x624>)
 8001db4:	400a      	ands	r2, r1
 8001db6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d100      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x496>
 8001dc0:	e0bb      	b.n	8001f3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc2:	4b60      	ldr	r3, [pc, #384]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2238      	movs	r2, #56	@ 0x38
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d100      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4a4>
 8001dce:	e07b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d156      	bne.n	8001e86 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001dde:	495d      	ldr	r1, [pc, #372]	@ (8001f54 <HAL_RCC_OscConfig+0x628>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe fcf2 	bl	80007cc <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fced 	bl	80007cc <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e09d      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	049b      	lsls	r3, r3, #18
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a51      	ldr	r2, [pc, #324]	@ (8001f58 <HAL_RCC_OscConfig+0x62c>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	4b42      	ldr	r3, [pc, #264]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e46:	2180      	movs	r1, #128	@ 0x80
 8001e48:	0449      	lsls	r1, r1, #17
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e54:	2180      	movs	r1, #128	@ 0x80
 8001e56:	0549      	lsls	r1, r1, #21
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fcb6 	bl	80007cc <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fcb1 	bl	80007cc <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e061      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	4b32      	ldr	r3, [pc, #200]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	049b      	lsls	r3, r3, #18
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x53a>
 8001e84:	e059      	b.n	8001f3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001e8c:	4931      	ldr	r1, [pc, #196]	@ (8001f54 <HAL_RCC_OscConfig+0x628>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe fc9b 	bl	80007cc <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe fc96 	bl	80007cc <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e046      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eae:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	049b      	lsls	r3, r3, #18
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001eba:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001ec0:	4926      	ldr	r1, [pc, #152]	@ (8001f5c <HAL_RCC_OscConfig+0x630>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	e038      	b.n	8001f3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e033      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_RCC_OscConfig+0x618>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2203      	movs	r2, #3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d126      	bne.n	8001f36 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2270      	movs	r2, #112	@ 0x70
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d11f      	bne.n	8001f36 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	23fe      	movs	r3, #254	@ 0xfe
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d116      	bne.n	8001f36 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	23f8      	movs	r3, #248	@ 0xf8
 8001f0c:	039b      	lsls	r3, r3, #14
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10e      	bne.n	8001f36 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	23e0      	movs	r3, #224	@ 0xe0
 8001f1c:	051b      	lsls	r3, r3, #20
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	0f5b      	lsrs	r3, r3, #29
 8001f2c:	075a      	lsls	r2, r3, #29
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b008      	add	sp, #32
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	efffffff 	.word	0xefffffff
 8001f54:	feffffff 	.word	0xfeffffff
 8001f58:	11c1808c 	.word	0x11c1808c
 8001f5c:	eefefffc 	.word	0xeefefffc

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0e9      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2207      	movs	r2, #7
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d91e      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b73      	ldr	r3, [pc, #460]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	4b70      	ldr	r3, [pc, #448]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fc1a 	bl	80007cc <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7fe fc15 	bl	80007cc <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_RCC_ClockConfig+0x1f4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0ca      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb2:	4b67      	ldr	r3, [pc, #412]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	4013      	ands	r3, r2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d015      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d006      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fd4:	4b60      	ldr	r3, [pc, #384]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8001fda:	21e0      	movs	r1, #224	@ 0xe0
 8001fdc:	01c9      	lsls	r1, r1, #7
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a5d      	ldr	r2, [pc, #372]	@ (800215c <HAL_RCC_ClockConfig+0x1fc>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d057      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d12b      	bne.n	800206c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e097      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002020:	4b4d      	ldr	r3, [pc, #308]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	049b      	lsls	r3, r3, #18
 8002028:	4013      	ands	r3, r2
 800202a:	d11f      	bne.n	800206c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e08b      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002038:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4013      	ands	r3, r2
 8002042:	d113      	bne.n	800206c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e07f      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d106      	bne.n	800205e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002050:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d108      	bne.n	800206c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e074      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205e:	4b3e      	ldr	r3, [pc, #248]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e06d      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800206c:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2207      	movs	r2, #7
 8002072:	4393      	bics	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4b37      	ldr	r3, [pc, #220]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002080:	f7fe fba4 	bl	80007cc <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002088:	e009      	b.n	800209e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208a:	f7fe fb9f 	bl	80007cc <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a2f      	ldr	r2, [pc, #188]	@ (8002154 <HAL_RCC_ClockConfig+0x1f4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e054      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2238      	movs	r2, #56	@ 0x38
 80020a4:	401a      	ands	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1ec      	bne.n	800208a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2207      	movs	r2, #7
 80020b6:	4013      	ands	r3, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d21e      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2207      	movs	r2, #7
 80020c4:	4393      	bics	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fb7c 	bl	80007cc <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020d8:	e009      	b.n	80020ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020da:	f7fe fb77 	bl	80007cc <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_RCC_ClockConfig+0x1f4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e02c      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ee:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2207      	movs	r2, #7
 80020f4:	4013      	ands	r3, r2
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1ee      	bne.n	80020da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <HAL_RCC_ClockConfig+0x200>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800211a:	f000 f829 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800211e:	0001      	movs	r1, r0
 8002120:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	220f      	movs	r2, #15
 8002128:	401a      	ands	r2, r3
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_RCC_ClockConfig+0x204>)
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	58d3      	ldr	r3, [r2, r3]
 8002130:	221f      	movs	r2, #31
 8002132:	4013      	ands	r3, r2
 8002134:	000a      	movs	r2, r1
 8002136:	40da      	lsrs	r2, r3
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_ClockConfig+0x208>)
 800213a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_ClockConfig+0x20c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7fe fae7 	bl	8000714 <HAL_InitTick>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40022000 	.word	0x40022000
 8002154:	00001388 	.word	0x00001388
 8002158:	40021000 	.word	0x40021000
 800215c:	fffff0ff 	.word	0xfffff0ff
 8002160:	ffff8fff 	.word	0xffff8fff
 8002164:	08003170 	.word	0x08003170
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002176:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2238      	movs	r2, #56	@ 0x38
 800217c:	4013      	ands	r3, r2
 800217e:	d10f      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002180:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0adb      	lsrs	r3, r3, #11
 8002186:	2207      	movs	r2, #7
 8002188:	4013      	ands	r3, r2
 800218a:	2201      	movs	r2, #1
 800218c:	409a      	lsls	r2, r3
 800218e:	0013      	movs	r3, r2
 8002190:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	4835      	ldr	r0, [pc, #212]	@ (800226c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002196:	f7fd ffbf 	bl	8000118 <__udivsi3>
 800219a:	0003      	movs	r3, r0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e05d      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a0:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2238      	movs	r2, #56	@ 0x38
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021ac:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x100>)
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e054      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2238      	movs	r2, #56	@ 0x38
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d138      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021be:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2203      	movs	r2, #3
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	3301      	adds	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d10d      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	4824      	ldr	r0, [pc, #144]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x100>)
 80021e0:	f7fd ff9a 	bl	8000118 <__udivsi3>
 80021e4:	0003      	movs	r3, r0
 80021e6:	0019      	movs	r1, r3
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	227f      	movs	r2, #127	@ 0x7f
 80021f0:	4013      	ands	r3, r2
 80021f2:	434b      	muls	r3, r1
 80021f4:	617b      	str	r3, [r7, #20]
        break;
 80021f6:	e00d      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	481c      	ldr	r0, [pc, #112]	@ (800226c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021fc:	f7fd ff8c 	bl	8000118 <__udivsi3>
 8002200:	0003      	movs	r3, r0
 8002202:	0019      	movs	r1, r3
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	227f      	movs	r2, #127	@ 0x7f
 800220c:	4013      	ands	r3, r2
 800220e:	434b      	muls	r3, r1
 8002210:	617b      	str	r3, [r7, #20]
        break;
 8002212:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0f5b      	lsrs	r3, r3, #29
 800221a:	2207      	movs	r2, #7
 800221c:	4013      	ands	r3, r2
 800221e:	3301      	adds	r3, #1
 8002220:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	6978      	ldr	r0, [r7, #20]
 8002226:	f7fd ff77 	bl	8000118 <__udivsi3>
 800222a:	0003      	movs	r3, r0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e015      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2238      	movs	r2, #56	@ 0x38
 8002236:	4013      	ands	r3, r2
 8002238:	2b20      	cmp	r3, #32
 800223a:	d103      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	e00b      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2238      	movs	r2, #56	@ 0x38
 800224a:	4013      	ands	r3, r2
 800224c:	2b18      	cmp	r3, #24
 800224e:	d103      	bne.n	8002258 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002250:	23fa      	movs	r3, #250	@ 0xfa
 8002252:	01db      	lsls	r3, r3, #7
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e001      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800225c:	693b      	ldr	r3, [r7, #16]
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	40021000 	.word	0x40021000
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200

08002274 <std>:
 8002274:	2300      	movs	r3, #0
 8002276:	b510      	push	{r4, lr}
 8002278:	0004      	movs	r4, r0
 800227a:	6003      	str	r3, [r0, #0]
 800227c:	6043      	str	r3, [r0, #4]
 800227e:	6083      	str	r3, [r0, #8]
 8002280:	8181      	strh	r1, [r0, #12]
 8002282:	6643      	str	r3, [r0, #100]	@ 0x64
 8002284:	81c2      	strh	r2, [r0, #14]
 8002286:	6103      	str	r3, [r0, #16]
 8002288:	6143      	str	r3, [r0, #20]
 800228a:	6183      	str	r3, [r0, #24]
 800228c:	0019      	movs	r1, r3
 800228e:	2208      	movs	r2, #8
 8002290:	305c      	adds	r0, #92	@ 0x5c
 8002292:	f000 f90f 	bl	80024b4 <memset>
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <std+0x50>)
 8002298:	6224      	str	r4, [r4, #32]
 800229a:	6263      	str	r3, [r4, #36]	@ 0x24
 800229c:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <std+0x54>)
 800229e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <std+0x58>)
 80022a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <std+0x5c>)
 80022a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <std+0x60>)
 80022aa:	429c      	cmp	r4, r3
 80022ac:	d005      	beq.n	80022ba <std+0x46>
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <std+0x64>)
 80022b0:	429c      	cmp	r4, r3
 80022b2:	d002      	beq.n	80022ba <std+0x46>
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <std+0x68>)
 80022b6:	429c      	cmp	r4, r3
 80022b8:	d103      	bne.n	80022c2 <std+0x4e>
 80022ba:	0020      	movs	r0, r4
 80022bc:	3058      	adds	r0, #88	@ 0x58
 80022be:	f000 f979 	bl	80025b4 <__retarget_lock_init_recursive>
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	0800241d 	.word	0x0800241d
 80022c8:	08002445 	.word	0x08002445
 80022cc:	0800247d 	.word	0x0800247d
 80022d0:	080024a9 	.word	0x080024a9
 80022d4:	200000f4 	.word	0x200000f4
 80022d8:	2000015c 	.word	0x2000015c
 80022dc:	200001c4 	.word	0x200001c4

080022e0 <stdio_exit_handler>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4a03      	ldr	r2, [pc, #12]	@ (80022f0 <stdio_exit_handler+0x10>)
 80022e4:	4903      	ldr	r1, [pc, #12]	@ (80022f4 <stdio_exit_handler+0x14>)
 80022e6:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <stdio_exit_handler+0x18>)
 80022e8:	f000 f86c 	bl	80023c4 <_fwalk_sglue>
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	08002e45 	.word	0x08002e45
 80022f8:	2000001c 	.word	0x2000001c

080022fc <cleanup_stdio>:
 80022fc:	6841      	ldr	r1, [r0, #4]
 80022fe:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <cleanup_stdio+0x30>)
 8002300:	b510      	push	{r4, lr}
 8002302:	0004      	movs	r4, r0
 8002304:	4299      	cmp	r1, r3
 8002306:	d001      	beq.n	800230c <cleanup_stdio+0x10>
 8002308:	f000 fd9c 	bl	8002e44 <_fflush_r>
 800230c:	68a1      	ldr	r1, [r4, #8]
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <cleanup_stdio+0x34>)
 8002310:	4299      	cmp	r1, r3
 8002312:	d002      	beq.n	800231a <cleanup_stdio+0x1e>
 8002314:	0020      	movs	r0, r4
 8002316:	f000 fd95 	bl	8002e44 <_fflush_r>
 800231a:	68e1      	ldr	r1, [r4, #12]
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <cleanup_stdio+0x38>)
 800231e:	4299      	cmp	r1, r3
 8002320:	d002      	beq.n	8002328 <cleanup_stdio+0x2c>
 8002322:	0020      	movs	r0, r4
 8002324:	f000 fd8e 	bl	8002e44 <_fflush_r>
 8002328:	bd10      	pop	{r4, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	200000f4 	.word	0x200000f4
 8002330:	2000015c 	.word	0x2000015c
 8002334:	200001c4 	.word	0x200001c4

08002338 <global_stdio_init.part.0>:
 8002338:	b510      	push	{r4, lr}
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <global_stdio_init.part.0+0x28>)
 800233c:	4a09      	ldr	r2, [pc, #36]	@ (8002364 <global_stdio_init.part.0+0x2c>)
 800233e:	2104      	movs	r1, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	4809      	ldr	r0, [pc, #36]	@ (8002368 <global_stdio_init.part.0+0x30>)
 8002344:	2200      	movs	r2, #0
 8002346:	f7ff ff95 	bl	8002274 <std>
 800234a:	2201      	movs	r2, #1
 800234c:	2109      	movs	r1, #9
 800234e:	4807      	ldr	r0, [pc, #28]	@ (800236c <global_stdio_init.part.0+0x34>)
 8002350:	f7ff ff90 	bl	8002274 <std>
 8002354:	2202      	movs	r2, #2
 8002356:	2112      	movs	r1, #18
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <global_stdio_init.part.0+0x38>)
 800235a:	f7ff ff8b 	bl	8002274 <std>
 800235e:	bd10      	pop	{r4, pc}
 8002360:	2000022c 	.word	0x2000022c
 8002364:	080022e1 	.word	0x080022e1
 8002368:	200000f4 	.word	0x200000f4
 800236c:	2000015c 	.word	0x2000015c
 8002370:	200001c4 	.word	0x200001c4

08002374 <__sfp_lock_acquire>:
 8002374:	b510      	push	{r4, lr}
 8002376:	4802      	ldr	r0, [pc, #8]	@ (8002380 <__sfp_lock_acquire+0xc>)
 8002378:	f000 f91d 	bl	80025b6 <__retarget_lock_acquire_recursive>
 800237c:	bd10      	pop	{r4, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	20000235 	.word	0x20000235

08002384 <__sfp_lock_release>:
 8002384:	b510      	push	{r4, lr}
 8002386:	4802      	ldr	r0, [pc, #8]	@ (8002390 <__sfp_lock_release+0xc>)
 8002388:	f000 f916 	bl	80025b8 <__retarget_lock_release_recursive>
 800238c:	bd10      	pop	{r4, pc}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	20000235 	.word	0x20000235

08002394 <__sinit>:
 8002394:	b510      	push	{r4, lr}
 8002396:	0004      	movs	r4, r0
 8002398:	f7ff ffec 	bl	8002374 <__sfp_lock_acquire>
 800239c:	6a23      	ldr	r3, [r4, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <__sinit+0x14>
 80023a2:	f7ff ffef 	bl	8002384 <__sfp_lock_release>
 80023a6:	bd10      	pop	{r4, pc}
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <__sinit+0x28>)
 80023aa:	6223      	str	r3, [r4, #32]
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <__sinit+0x2c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f6      	bne.n	80023a2 <__sinit+0xe>
 80023b4:	f7ff ffc0 	bl	8002338 <global_stdio_init.part.0>
 80023b8:	e7f3      	b.n	80023a2 <__sinit+0xe>
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	080022fd 	.word	0x080022fd
 80023c0:	2000022c 	.word	0x2000022c

080023c4 <_fwalk_sglue>:
 80023c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023c6:	0014      	movs	r4, r2
 80023c8:	2600      	movs	r6, #0
 80023ca:	9000      	str	r0, [sp, #0]
 80023cc:	9101      	str	r1, [sp, #4]
 80023ce:	68a5      	ldr	r5, [r4, #8]
 80023d0:	6867      	ldr	r7, [r4, #4]
 80023d2:	3f01      	subs	r7, #1
 80023d4:	d504      	bpl.n	80023e0 <_fwalk_sglue+0x1c>
 80023d6:	6824      	ldr	r4, [r4, #0]
 80023d8:	2c00      	cmp	r4, #0
 80023da:	d1f8      	bne.n	80023ce <_fwalk_sglue+0xa>
 80023dc:	0030      	movs	r0, r6
 80023de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023e0:	89ab      	ldrh	r3, [r5, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d908      	bls.n	80023f8 <_fwalk_sglue+0x34>
 80023e6:	220e      	movs	r2, #14
 80023e8:	5eab      	ldrsh	r3, [r5, r2]
 80023ea:	3301      	adds	r3, #1
 80023ec:	d004      	beq.n	80023f8 <_fwalk_sglue+0x34>
 80023ee:	0029      	movs	r1, r5
 80023f0:	9800      	ldr	r0, [sp, #0]
 80023f2:	9b01      	ldr	r3, [sp, #4]
 80023f4:	4798      	blx	r3
 80023f6:	4306      	orrs	r6, r0
 80023f8:	3568      	adds	r5, #104	@ 0x68
 80023fa:	e7ea      	b.n	80023d2 <_fwalk_sglue+0xe>

080023fc <iprintf>:
 80023fc:	b40f      	push	{r0, r1, r2, r3}
 80023fe:	b507      	push	{r0, r1, r2, lr}
 8002400:	4905      	ldr	r1, [pc, #20]	@ (8002418 <iprintf+0x1c>)
 8002402:	ab04      	add	r3, sp, #16
 8002404:	6808      	ldr	r0, [r1, #0]
 8002406:	cb04      	ldmia	r3!, {r2}
 8002408:	6881      	ldr	r1, [r0, #8]
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	f000 f9fa 	bl	8002804 <_vfiprintf_r>
 8002410:	b003      	add	sp, #12
 8002412:	bc08      	pop	{r3}
 8002414:	b004      	add	sp, #16
 8002416:	4718      	bx	r3
 8002418:	20000018 	.word	0x20000018

0800241c <__sread>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	000c      	movs	r4, r1
 8002420:	250e      	movs	r5, #14
 8002422:	5f49      	ldrsh	r1, [r1, r5]
 8002424:	f000 f874 	bl	8002510 <_read_r>
 8002428:	2800      	cmp	r0, #0
 800242a:	db03      	blt.n	8002434 <__sread+0x18>
 800242c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800242e:	181b      	adds	r3, r3, r0
 8002430:	6563      	str	r3, [r4, #84]	@ 0x54
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	4a02      	ldr	r2, [pc, #8]	@ (8002440 <__sread+0x24>)
 8002438:	4013      	ands	r3, r2
 800243a:	81a3      	strh	r3, [r4, #12]
 800243c:	e7f9      	b.n	8002432 <__sread+0x16>
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	ffffefff 	.word	0xffffefff

08002444 <__swrite>:
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	001f      	movs	r7, r3
 8002448:	898b      	ldrh	r3, [r1, #12]
 800244a:	0005      	movs	r5, r0
 800244c:	000c      	movs	r4, r1
 800244e:	0016      	movs	r6, r2
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	d505      	bpl.n	8002460 <__swrite+0x1c>
 8002454:	230e      	movs	r3, #14
 8002456:	5ec9      	ldrsh	r1, [r1, r3]
 8002458:	2200      	movs	r2, #0
 800245a:	2302      	movs	r3, #2
 800245c:	f000 f844 	bl	80024e8 <_lseek_r>
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	4a05      	ldr	r2, [pc, #20]	@ (8002478 <__swrite+0x34>)
 8002464:	0028      	movs	r0, r5
 8002466:	4013      	ands	r3, r2
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	0032      	movs	r2, r6
 800246c:	230e      	movs	r3, #14
 800246e:	5ee1      	ldrsh	r1, [r4, r3]
 8002470:	003b      	movs	r3, r7
 8002472:	f000 f861 	bl	8002538 <_write_r>
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002478:	ffffefff 	.word	0xffffefff

0800247c <__sseek>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	000c      	movs	r4, r1
 8002480:	250e      	movs	r5, #14
 8002482:	5f49      	ldrsh	r1, [r1, r5]
 8002484:	f000 f830 	bl	80024e8 <_lseek_r>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	1c42      	adds	r2, r0, #1
 800248c:	d103      	bne.n	8002496 <__sseek+0x1a>
 800248e:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <__sseek+0x28>)
 8002490:	4013      	ands	r3, r2
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	bd70      	pop	{r4, r5, r6, pc}
 8002496:	2280      	movs	r2, #128	@ 0x80
 8002498:	0152      	lsls	r2, r2, #5
 800249a:	4313      	orrs	r3, r2
 800249c:	81a3      	strh	r3, [r4, #12]
 800249e:	6560      	str	r0, [r4, #84]	@ 0x54
 80024a0:	e7f8      	b.n	8002494 <__sseek+0x18>
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	ffffefff 	.word	0xffffefff

080024a8 <__sclose>:
 80024a8:	b510      	push	{r4, lr}
 80024aa:	230e      	movs	r3, #14
 80024ac:	5ec9      	ldrsh	r1, [r1, r3]
 80024ae:	f000 f809 	bl	80024c4 <_close_r>
 80024b2:	bd10      	pop	{r4, pc}

080024b4 <memset>:
 80024b4:	0003      	movs	r3, r0
 80024b6:	1882      	adds	r2, r0, r2
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d100      	bne.n	80024be <memset+0xa>
 80024bc:	4770      	bx	lr
 80024be:	7019      	strb	r1, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	e7f9      	b.n	80024b8 <memset+0x4>

080024c4 <_close_r>:
 80024c4:	2300      	movs	r3, #0
 80024c6:	b570      	push	{r4, r5, r6, lr}
 80024c8:	4d06      	ldr	r5, [pc, #24]	@ (80024e4 <_close_r+0x20>)
 80024ca:	0004      	movs	r4, r0
 80024cc:	0008      	movs	r0, r1
 80024ce:	602b      	str	r3, [r5, #0]
 80024d0:	f7fe f86e 	bl	80005b0 <_close>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d103      	bne.n	80024e0 <_close_r+0x1c>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d000      	beq.n	80024e0 <_close_r+0x1c>
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	bd70      	pop	{r4, r5, r6, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	20000230 	.word	0x20000230

080024e8 <_lseek_r>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	0004      	movs	r4, r0
 80024ec:	0008      	movs	r0, r1
 80024ee:	0011      	movs	r1, r2
 80024f0:	001a      	movs	r2, r3
 80024f2:	2300      	movs	r3, #0
 80024f4:	4d05      	ldr	r5, [pc, #20]	@ (800250c <_lseek_r+0x24>)
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	f7fe f87b 	bl	80005f2 <_lseek>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d103      	bne.n	8002508 <_lseek_r+0x20>
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d000      	beq.n	8002508 <_lseek_r+0x20>
 8002506:	6023      	str	r3, [r4, #0]
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	20000230 	.word	0x20000230

08002510 <_read_r>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	0004      	movs	r4, r0
 8002514:	0008      	movs	r0, r1
 8002516:	0011      	movs	r1, r2
 8002518:	001a      	movs	r2, r3
 800251a:	2300      	movs	r3, #0
 800251c:	4d05      	ldr	r5, [pc, #20]	@ (8002534 <_read_r+0x24>)
 800251e:	602b      	str	r3, [r5, #0]
 8002520:	f7fe f80d 	bl	800053e <_read>
 8002524:	1c43      	adds	r3, r0, #1
 8002526:	d103      	bne.n	8002530 <_read_r+0x20>
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d000      	beq.n	8002530 <_read_r+0x20>
 800252e:	6023      	str	r3, [r4, #0]
 8002530:	bd70      	pop	{r4, r5, r6, pc}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	20000230 	.word	0x20000230

08002538 <_write_r>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	0004      	movs	r4, r0
 800253c:	0008      	movs	r0, r1
 800253e:	0011      	movs	r1, r2
 8002540:	001a      	movs	r2, r3
 8002542:	2300      	movs	r3, #0
 8002544:	4d05      	ldr	r5, [pc, #20]	@ (800255c <_write_r+0x24>)
 8002546:	602b      	str	r3, [r5, #0]
 8002548:	f7fe f816 	bl	8000578 <_write>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d103      	bne.n	8002558 <_write_r+0x20>
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d000      	beq.n	8002558 <_write_r+0x20>
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	20000230 	.word	0x20000230

08002560 <__errno>:
 8002560:	4b01      	ldr	r3, [pc, #4]	@ (8002568 <__errno+0x8>)
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	4770      	bx	lr
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	20000018 	.word	0x20000018

0800256c <__libc_init_array>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	2600      	movs	r6, #0
 8002570:	4c0c      	ldr	r4, [pc, #48]	@ (80025a4 <__libc_init_array+0x38>)
 8002572:	4d0d      	ldr	r5, [pc, #52]	@ (80025a8 <__libc_init_array+0x3c>)
 8002574:	1b64      	subs	r4, r4, r5
 8002576:	10a4      	asrs	r4, r4, #2
 8002578:	42a6      	cmp	r6, r4
 800257a:	d109      	bne.n	8002590 <__libc_init_array+0x24>
 800257c:	2600      	movs	r6, #0
 800257e:	f000 fddb 	bl	8003138 <_init>
 8002582:	4c0a      	ldr	r4, [pc, #40]	@ (80025ac <__libc_init_array+0x40>)
 8002584:	4d0a      	ldr	r5, [pc, #40]	@ (80025b0 <__libc_init_array+0x44>)
 8002586:	1b64      	subs	r4, r4, r5
 8002588:	10a4      	asrs	r4, r4, #2
 800258a:	42a6      	cmp	r6, r4
 800258c:	d105      	bne.n	800259a <__libc_init_array+0x2e>
 800258e:	bd70      	pop	{r4, r5, r6, pc}
 8002590:	00b3      	lsls	r3, r6, #2
 8002592:	58eb      	ldr	r3, [r5, r3]
 8002594:	4798      	blx	r3
 8002596:	3601      	adds	r6, #1
 8002598:	e7ee      	b.n	8002578 <__libc_init_array+0xc>
 800259a:	00b3      	lsls	r3, r6, #2
 800259c:	58eb      	ldr	r3, [r5, r3]
 800259e:	4798      	blx	r3
 80025a0:	3601      	adds	r6, #1
 80025a2:	e7f2      	b.n	800258a <__libc_init_array+0x1e>
 80025a4:	080031e4 	.word	0x080031e4
 80025a8:	080031e4 	.word	0x080031e4
 80025ac:	080031e8 	.word	0x080031e8
 80025b0:	080031e4 	.word	0x080031e4

080025b4 <__retarget_lock_init_recursive>:
 80025b4:	4770      	bx	lr

080025b6 <__retarget_lock_acquire_recursive>:
 80025b6:	4770      	bx	lr

080025b8 <__retarget_lock_release_recursive>:
 80025b8:	4770      	bx	lr
	...

080025bc <_free_r>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	0005      	movs	r5, r0
 80025c0:	1e0c      	subs	r4, r1, #0
 80025c2:	d010      	beq.n	80025e6 <_free_r+0x2a>
 80025c4:	3c04      	subs	r4, #4
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da00      	bge.n	80025ce <_free_r+0x12>
 80025cc:	18e4      	adds	r4, r4, r3
 80025ce:	0028      	movs	r0, r5
 80025d0:	f000 f8e0 	bl	8002794 <__malloc_lock>
 80025d4:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <_free_r+0x90>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <_free_r+0x2c>
 80025dc:	6063      	str	r3, [r4, #4]
 80025de:	6014      	str	r4, [r2, #0]
 80025e0:	0028      	movs	r0, r5
 80025e2:	f000 f8df 	bl	80027a4 <__malloc_unlock>
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	42a3      	cmp	r3, r4
 80025ea:	d908      	bls.n	80025fe <_free_r+0x42>
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	1821      	adds	r1, r4, r0
 80025f0:	428b      	cmp	r3, r1
 80025f2:	d1f3      	bne.n	80025dc <_free_r+0x20>
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	1809      	adds	r1, r1, r0
 80025fa:	6021      	str	r1, [r4, #0]
 80025fc:	e7ee      	b.n	80025dc <_free_r+0x20>
 80025fe:	001a      	movs	r2, r3
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <_free_r+0x4e>
 8002606:	42a3      	cmp	r3, r4
 8002608:	d9f9      	bls.n	80025fe <_free_r+0x42>
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	1850      	adds	r0, r2, r1
 800260e:	42a0      	cmp	r0, r4
 8002610:	d10b      	bne.n	800262a <_free_r+0x6e>
 8002612:	6820      	ldr	r0, [r4, #0]
 8002614:	1809      	adds	r1, r1, r0
 8002616:	1850      	adds	r0, r2, r1
 8002618:	6011      	str	r1, [r2, #0]
 800261a:	4283      	cmp	r3, r0
 800261c:	d1e0      	bne.n	80025e0 <_free_r+0x24>
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	1841      	adds	r1, r0, r1
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	6053      	str	r3, [r2, #4]
 8002628:	e7da      	b.n	80025e0 <_free_r+0x24>
 800262a:	42a0      	cmp	r0, r4
 800262c:	d902      	bls.n	8002634 <_free_r+0x78>
 800262e:	230c      	movs	r3, #12
 8002630:	602b      	str	r3, [r5, #0]
 8002632:	e7d5      	b.n	80025e0 <_free_r+0x24>
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	1821      	adds	r1, r4, r0
 8002638:	428b      	cmp	r3, r1
 800263a:	d103      	bne.n	8002644 <_free_r+0x88>
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	1809      	adds	r1, r1, r0
 8002642:	6021      	str	r1, [r4, #0]
 8002644:	6063      	str	r3, [r4, #4]
 8002646:	6054      	str	r4, [r2, #4]
 8002648:	e7ca      	b.n	80025e0 <_free_r+0x24>
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	2000023c 	.word	0x2000023c

08002650 <sbrk_aligned>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4e0f      	ldr	r6, [pc, #60]	@ (8002690 <sbrk_aligned+0x40>)
 8002654:	000d      	movs	r5, r1
 8002656:	6831      	ldr	r1, [r6, #0]
 8002658:	0004      	movs	r4, r0
 800265a:	2900      	cmp	r1, #0
 800265c:	d102      	bne.n	8002664 <sbrk_aligned+0x14>
 800265e:	f000 fcbd 	bl	8002fdc <_sbrk_r>
 8002662:	6030      	str	r0, [r6, #0]
 8002664:	0029      	movs	r1, r5
 8002666:	0020      	movs	r0, r4
 8002668:	f000 fcb8 	bl	8002fdc <_sbrk_r>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d103      	bne.n	8002678 <sbrk_aligned+0x28>
 8002670:	2501      	movs	r5, #1
 8002672:	426d      	negs	r5, r5
 8002674:	0028      	movs	r0, r5
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	2303      	movs	r3, #3
 800267a:	1cc5      	adds	r5, r0, #3
 800267c:	439d      	bics	r5, r3
 800267e:	42a8      	cmp	r0, r5
 8002680:	d0f8      	beq.n	8002674 <sbrk_aligned+0x24>
 8002682:	1a29      	subs	r1, r5, r0
 8002684:	0020      	movs	r0, r4
 8002686:	f000 fca9 	bl	8002fdc <_sbrk_r>
 800268a:	3001      	adds	r0, #1
 800268c:	d1f2      	bne.n	8002674 <sbrk_aligned+0x24>
 800268e:	e7ef      	b.n	8002670 <sbrk_aligned+0x20>
 8002690:	20000238 	.word	0x20000238

08002694 <_malloc_r>:
 8002694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002696:	2203      	movs	r2, #3
 8002698:	1ccb      	adds	r3, r1, #3
 800269a:	4393      	bics	r3, r2
 800269c:	3308      	adds	r3, #8
 800269e:	0005      	movs	r5, r0
 80026a0:	001f      	movs	r7, r3
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d234      	bcs.n	8002710 <_malloc_r+0x7c>
 80026a6:	270c      	movs	r7, #12
 80026a8:	42b9      	cmp	r1, r7
 80026aa:	d833      	bhi.n	8002714 <_malloc_r+0x80>
 80026ac:	0028      	movs	r0, r5
 80026ae:	f000 f871 	bl	8002794 <__malloc_lock>
 80026b2:	4e37      	ldr	r6, [pc, #220]	@ (8002790 <_malloc_r+0xfc>)
 80026b4:	6833      	ldr	r3, [r6, #0]
 80026b6:	001c      	movs	r4, r3
 80026b8:	2c00      	cmp	r4, #0
 80026ba:	d12f      	bne.n	800271c <_malloc_r+0x88>
 80026bc:	0039      	movs	r1, r7
 80026be:	0028      	movs	r0, r5
 80026c0:	f7ff ffc6 	bl	8002650 <sbrk_aligned>
 80026c4:	0004      	movs	r4, r0
 80026c6:	1c43      	adds	r3, r0, #1
 80026c8:	d15f      	bne.n	800278a <_malloc_r+0xf6>
 80026ca:	6834      	ldr	r4, [r6, #0]
 80026cc:	9400      	str	r4, [sp, #0]
 80026ce:	9b00      	ldr	r3, [sp, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d14a      	bne.n	800276a <_malloc_r+0xd6>
 80026d4:	2c00      	cmp	r4, #0
 80026d6:	d052      	beq.n	800277e <_malloc_r+0xea>
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	0028      	movs	r0, r5
 80026dc:	18e3      	adds	r3, r4, r3
 80026de:	9900      	ldr	r1, [sp, #0]
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	f000 fc7b 	bl	8002fdc <_sbrk_r>
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	4283      	cmp	r3, r0
 80026ea:	d148      	bne.n	800277e <_malloc_r+0xea>
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	0028      	movs	r0, r5
 80026f0:	1aff      	subs	r7, r7, r3
 80026f2:	0039      	movs	r1, r7
 80026f4:	f7ff ffac 	bl	8002650 <sbrk_aligned>
 80026f8:	3001      	adds	r0, #1
 80026fa:	d040      	beq.n	800277e <_malloc_r+0xea>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	19db      	adds	r3, r3, r7
 8002700:	6023      	str	r3, [r4, #0]
 8002702:	6833      	ldr	r3, [r6, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	2a00      	cmp	r2, #0
 8002708:	d133      	bne.n	8002772 <_malloc_r+0xde>
 800270a:	9b00      	ldr	r3, [sp, #0]
 800270c:	6033      	str	r3, [r6, #0]
 800270e:	e019      	b.n	8002744 <_malloc_r+0xb0>
 8002710:	2b00      	cmp	r3, #0
 8002712:	dac9      	bge.n	80026a8 <_malloc_r+0x14>
 8002714:	230c      	movs	r3, #12
 8002716:	602b      	str	r3, [r5, #0]
 8002718:	2000      	movs	r0, #0
 800271a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800271c:	6821      	ldr	r1, [r4, #0]
 800271e:	1bc9      	subs	r1, r1, r7
 8002720:	d420      	bmi.n	8002764 <_malloc_r+0xd0>
 8002722:	290b      	cmp	r1, #11
 8002724:	d90a      	bls.n	800273c <_malloc_r+0xa8>
 8002726:	19e2      	adds	r2, r4, r7
 8002728:	6027      	str	r7, [r4, #0]
 800272a:	42a3      	cmp	r3, r4
 800272c:	d104      	bne.n	8002738 <_malloc_r+0xa4>
 800272e:	6032      	str	r2, [r6, #0]
 8002730:	6863      	ldr	r3, [r4, #4]
 8002732:	6011      	str	r1, [r2, #0]
 8002734:	6053      	str	r3, [r2, #4]
 8002736:	e005      	b.n	8002744 <_malloc_r+0xb0>
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	e7f9      	b.n	8002730 <_malloc_r+0x9c>
 800273c:	6862      	ldr	r2, [r4, #4]
 800273e:	42a3      	cmp	r3, r4
 8002740:	d10e      	bne.n	8002760 <_malloc_r+0xcc>
 8002742:	6032      	str	r2, [r6, #0]
 8002744:	0028      	movs	r0, r5
 8002746:	f000 f82d 	bl	80027a4 <__malloc_unlock>
 800274a:	0020      	movs	r0, r4
 800274c:	2207      	movs	r2, #7
 800274e:	300b      	adds	r0, #11
 8002750:	1d23      	adds	r3, r4, #4
 8002752:	4390      	bics	r0, r2
 8002754:	1ac2      	subs	r2, r0, r3
 8002756:	4298      	cmp	r0, r3
 8002758:	d0df      	beq.n	800271a <_malloc_r+0x86>
 800275a:	1a1b      	subs	r3, r3, r0
 800275c:	50a3      	str	r3, [r4, r2]
 800275e:	e7dc      	b.n	800271a <_malloc_r+0x86>
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	e7ef      	b.n	8002744 <_malloc_r+0xb0>
 8002764:	0023      	movs	r3, r4
 8002766:	6864      	ldr	r4, [r4, #4]
 8002768:	e7a6      	b.n	80026b8 <_malloc_r+0x24>
 800276a:	9c00      	ldr	r4, [sp, #0]
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	e7ad      	b.n	80026ce <_malloc_r+0x3a>
 8002772:	001a      	movs	r2, r3
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	42a3      	cmp	r3, r4
 8002778:	d1fb      	bne.n	8002772 <_malloc_r+0xde>
 800277a:	2300      	movs	r3, #0
 800277c:	e7da      	b.n	8002734 <_malloc_r+0xa0>
 800277e:	230c      	movs	r3, #12
 8002780:	0028      	movs	r0, r5
 8002782:	602b      	str	r3, [r5, #0]
 8002784:	f000 f80e 	bl	80027a4 <__malloc_unlock>
 8002788:	e7c6      	b.n	8002718 <_malloc_r+0x84>
 800278a:	6007      	str	r7, [r0, #0]
 800278c:	e7da      	b.n	8002744 <_malloc_r+0xb0>
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	2000023c 	.word	0x2000023c

08002794 <__malloc_lock>:
 8002794:	b510      	push	{r4, lr}
 8002796:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <__malloc_lock+0xc>)
 8002798:	f7ff ff0d 	bl	80025b6 <__retarget_lock_acquire_recursive>
 800279c:	bd10      	pop	{r4, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	20000234 	.word	0x20000234

080027a4 <__malloc_unlock>:
 80027a4:	b510      	push	{r4, lr}
 80027a6:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <__malloc_unlock+0xc>)
 80027a8:	f7ff ff06 	bl	80025b8 <__retarget_lock_release_recursive>
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	20000234 	.word	0x20000234

080027b4 <__sfputc_r>:
 80027b4:	6893      	ldr	r3, [r2, #8]
 80027b6:	b510      	push	{r4, lr}
 80027b8:	3b01      	subs	r3, #1
 80027ba:	6093      	str	r3, [r2, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da04      	bge.n	80027ca <__sfputc_r+0x16>
 80027c0:	6994      	ldr	r4, [r2, #24]
 80027c2:	42a3      	cmp	r3, r4
 80027c4:	db07      	blt.n	80027d6 <__sfputc_r+0x22>
 80027c6:	290a      	cmp	r1, #10
 80027c8:	d005      	beq.n	80027d6 <__sfputc_r+0x22>
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	1c58      	adds	r0, r3, #1
 80027ce:	6010      	str	r0, [r2, #0]
 80027d0:	7019      	strb	r1, [r3, #0]
 80027d2:	0008      	movs	r0, r1
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	f000 fb60 	bl	8002e9a <__swbuf_r>
 80027da:	0001      	movs	r1, r0
 80027dc:	e7f9      	b.n	80027d2 <__sfputc_r+0x1e>

080027de <__sfputs_r>:
 80027de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e0:	0006      	movs	r6, r0
 80027e2:	000f      	movs	r7, r1
 80027e4:	0014      	movs	r4, r2
 80027e6:	18d5      	adds	r5, r2, r3
 80027e8:	42ac      	cmp	r4, r5
 80027ea:	d101      	bne.n	80027f0 <__sfputs_r+0x12>
 80027ec:	2000      	movs	r0, #0
 80027ee:	e007      	b.n	8002800 <__sfputs_r+0x22>
 80027f0:	7821      	ldrb	r1, [r4, #0]
 80027f2:	003a      	movs	r2, r7
 80027f4:	0030      	movs	r0, r6
 80027f6:	f7ff ffdd 	bl	80027b4 <__sfputc_r>
 80027fa:	3401      	adds	r4, #1
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d1f3      	bne.n	80027e8 <__sfputs_r+0xa>
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002804 <_vfiprintf_r>:
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	b0a1      	sub	sp, #132	@ 0x84
 8002808:	000f      	movs	r7, r1
 800280a:	0015      	movs	r5, r2
 800280c:	001e      	movs	r6, r3
 800280e:	9003      	str	r0, [sp, #12]
 8002810:	2800      	cmp	r0, #0
 8002812:	d004      	beq.n	800281e <_vfiprintf_r+0x1a>
 8002814:	6a03      	ldr	r3, [r0, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <_vfiprintf_r+0x1a>
 800281a:	f7ff fdbb 	bl	8002394 <__sinit>
 800281e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002820:	07db      	lsls	r3, r3, #31
 8002822:	d405      	bmi.n	8002830 <_vfiprintf_r+0x2c>
 8002824:	89bb      	ldrh	r3, [r7, #12]
 8002826:	059b      	lsls	r3, r3, #22
 8002828:	d402      	bmi.n	8002830 <_vfiprintf_r+0x2c>
 800282a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800282c:	f7ff fec3 	bl	80025b6 <__retarget_lock_acquire_recursive>
 8002830:	89bb      	ldrh	r3, [r7, #12]
 8002832:	071b      	lsls	r3, r3, #28
 8002834:	d502      	bpl.n	800283c <_vfiprintf_r+0x38>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d113      	bne.n	8002864 <_vfiprintf_r+0x60>
 800283c:	0039      	movs	r1, r7
 800283e:	9803      	ldr	r0, [sp, #12]
 8002840:	f000 fb6e 	bl	8002f20 <__swsetup_r>
 8002844:	2800      	cmp	r0, #0
 8002846:	d00d      	beq.n	8002864 <_vfiprintf_r+0x60>
 8002848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800284a:	07db      	lsls	r3, r3, #31
 800284c:	d503      	bpl.n	8002856 <_vfiprintf_r+0x52>
 800284e:	2001      	movs	r0, #1
 8002850:	4240      	negs	r0, r0
 8002852:	b021      	add	sp, #132	@ 0x84
 8002854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002856:	89bb      	ldrh	r3, [r7, #12]
 8002858:	059b      	lsls	r3, r3, #22
 800285a:	d4f8      	bmi.n	800284e <_vfiprintf_r+0x4a>
 800285c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800285e:	f7ff feab 	bl	80025b8 <__retarget_lock_release_recursive>
 8002862:	e7f4      	b.n	800284e <_vfiprintf_r+0x4a>
 8002864:	2300      	movs	r3, #0
 8002866:	ac08      	add	r4, sp, #32
 8002868:	6163      	str	r3, [r4, #20]
 800286a:	3320      	adds	r3, #32
 800286c:	7663      	strb	r3, [r4, #25]
 800286e:	3310      	adds	r3, #16
 8002870:	76a3      	strb	r3, [r4, #26]
 8002872:	9607      	str	r6, [sp, #28]
 8002874:	002e      	movs	r6, r5
 8002876:	7833      	ldrb	r3, [r6, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <_vfiprintf_r+0x7c>
 800287c:	2b25      	cmp	r3, #37	@ 0x25
 800287e:	d148      	bne.n	8002912 <_vfiprintf_r+0x10e>
 8002880:	1b73      	subs	r3, r6, r5
 8002882:	9305      	str	r3, [sp, #20]
 8002884:	42ae      	cmp	r6, r5
 8002886:	d00b      	beq.n	80028a0 <_vfiprintf_r+0x9c>
 8002888:	002a      	movs	r2, r5
 800288a:	0039      	movs	r1, r7
 800288c:	9803      	ldr	r0, [sp, #12]
 800288e:	f7ff ffa6 	bl	80027de <__sfputs_r>
 8002892:	3001      	adds	r0, #1
 8002894:	d100      	bne.n	8002898 <_vfiprintf_r+0x94>
 8002896:	e0ae      	b.n	80029f6 <_vfiprintf_r+0x1f2>
 8002898:	6963      	ldr	r3, [r4, #20]
 800289a:	9a05      	ldr	r2, [sp, #20]
 800289c:	189b      	adds	r3, r3, r2
 800289e:	6163      	str	r3, [r4, #20]
 80028a0:	7833      	ldrb	r3, [r6, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <_vfiprintf_r+0xa4>
 80028a6:	e0a6      	b.n	80029f6 <_vfiprintf_r+0x1f2>
 80028a8:	2201      	movs	r2, #1
 80028aa:	2300      	movs	r3, #0
 80028ac:	4252      	negs	r2, r2
 80028ae:	6062      	str	r2, [r4, #4]
 80028b0:	a904      	add	r1, sp, #16
 80028b2:	3254      	adds	r2, #84	@ 0x54
 80028b4:	1852      	adds	r2, r2, r1
 80028b6:	1c75      	adds	r5, r6, #1
 80028b8:	6023      	str	r3, [r4, #0]
 80028ba:	60e3      	str	r3, [r4, #12]
 80028bc:	60a3      	str	r3, [r4, #8]
 80028be:	7013      	strb	r3, [r2, #0]
 80028c0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80028c2:	4b59      	ldr	r3, [pc, #356]	@ (8002a28 <_vfiprintf_r+0x224>)
 80028c4:	2205      	movs	r2, #5
 80028c6:	0018      	movs	r0, r3
 80028c8:	7829      	ldrb	r1, [r5, #0]
 80028ca:	9305      	str	r3, [sp, #20]
 80028cc:	f000 fb98 	bl	8003000 <memchr>
 80028d0:	1c6e      	adds	r6, r5, #1
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d11f      	bne.n	8002916 <_vfiprintf_r+0x112>
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	06d3      	lsls	r3, r2, #27
 80028da:	d504      	bpl.n	80028e6 <_vfiprintf_r+0xe2>
 80028dc:	2353      	movs	r3, #83	@ 0x53
 80028de:	a904      	add	r1, sp, #16
 80028e0:	185b      	adds	r3, r3, r1
 80028e2:	2120      	movs	r1, #32
 80028e4:	7019      	strb	r1, [r3, #0]
 80028e6:	0713      	lsls	r3, r2, #28
 80028e8:	d504      	bpl.n	80028f4 <_vfiprintf_r+0xf0>
 80028ea:	2353      	movs	r3, #83	@ 0x53
 80028ec:	a904      	add	r1, sp, #16
 80028ee:	185b      	adds	r3, r3, r1
 80028f0:	212b      	movs	r1, #43	@ 0x2b
 80028f2:	7019      	strb	r1, [r3, #0]
 80028f4:	782b      	ldrb	r3, [r5, #0]
 80028f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80028f8:	d016      	beq.n	8002928 <_vfiprintf_r+0x124>
 80028fa:	002e      	movs	r6, r5
 80028fc:	2100      	movs	r1, #0
 80028fe:	200a      	movs	r0, #10
 8002900:	68e3      	ldr	r3, [r4, #12]
 8002902:	7832      	ldrb	r2, [r6, #0]
 8002904:	1c75      	adds	r5, r6, #1
 8002906:	3a30      	subs	r2, #48	@ 0x30
 8002908:	2a09      	cmp	r2, #9
 800290a:	d950      	bls.n	80029ae <_vfiprintf_r+0x1aa>
 800290c:	2900      	cmp	r1, #0
 800290e:	d111      	bne.n	8002934 <_vfiprintf_r+0x130>
 8002910:	e017      	b.n	8002942 <_vfiprintf_r+0x13e>
 8002912:	3601      	adds	r6, #1
 8002914:	e7af      	b.n	8002876 <_vfiprintf_r+0x72>
 8002916:	9b05      	ldr	r3, [sp, #20]
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	1ac0      	subs	r0, r0, r3
 800291c:	2301      	movs	r3, #1
 800291e:	4083      	lsls	r3, r0
 8002920:	4313      	orrs	r3, r2
 8002922:	0035      	movs	r5, r6
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	e7cc      	b.n	80028c2 <_vfiprintf_r+0xbe>
 8002928:	9b07      	ldr	r3, [sp, #28]
 800292a:	1d19      	adds	r1, r3, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	9107      	str	r1, [sp, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db01      	blt.n	8002938 <_vfiprintf_r+0x134>
 8002934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002936:	e004      	b.n	8002942 <_vfiprintf_r+0x13e>
 8002938:	425b      	negs	r3, r3
 800293a:	60e3      	str	r3, [r4, #12]
 800293c:	2302      	movs	r3, #2
 800293e:	4313      	orrs	r3, r2
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	7833      	ldrb	r3, [r6, #0]
 8002944:	2b2e      	cmp	r3, #46	@ 0x2e
 8002946:	d10c      	bne.n	8002962 <_vfiprintf_r+0x15e>
 8002948:	7873      	ldrb	r3, [r6, #1]
 800294a:	2b2a      	cmp	r3, #42	@ 0x2a
 800294c:	d134      	bne.n	80029b8 <_vfiprintf_r+0x1b4>
 800294e:	9b07      	ldr	r3, [sp, #28]
 8002950:	3602      	adds	r6, #2
 8002952:	1d1a      	adds	r2, r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	9207      	str	r2, [sp, #28]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da01      	bge.n	8002960 <_vfiprintf_r+0x15c>
 800295c:	2301      	movs	r3, #1
 800295e:	425b      	negs	r3, r3
 8002960:	9309      	str	r3, [sp, #36]	@ 0x24
 8002962:	4d32      	ldr	r5, [pc, #200]	@ (8002a2c <_vfiprintf_r+0x228>)
 8002964:	2203      	movs	r2, #3
 8002966:	0028      	movs	r0, r5
 8002968:	7831      	ldrb	r1, [r6, #0]
 800296a:	f000 fb49 	bl	8003000 <memchr>
 800296e:	2800      	cmp	r0, #0
 8002970:	d006      	beq.n	8002980 <_vfiprintf_r+0x17c>
 8002972:	2340      	movs	r3, #64	@ 0x40
 8002974:	1b40      	subs	r0, r0, r5
 8002976:	4083      	lsls	r3, r0
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	3601      	adds	r6, #1
 800297c:	4313      	orrs	r3, r2
 800297e:	6023      	str	r3, [r4, #0]
 8002980:	7831      	ldrb	r1, [r6, #0]
 8002982:	2206      	movs	r2, #6
 8002984:	482a      	ldr	r0, [pc, #168]	@ (8002a30 <_vfiprintf_r+0x22c>)
 8002986:	1c75      	adds	r5, r6, #1
 8002988:	7621      	strb	r1, [r4, #24]
 800298a:	f000 fb39 	bl	8003000 <memchr>
 800298e:	2800      	cmp	r0, #0
 8002990:	d040      	beq.n	8002a14 <_vfiprintf_r+0x210>
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <_vfiprintf_r+0x230>)
 8002994:	2b00      	cmp	r3, #0
 8002996:	d122      	bne.n	80029de <_vfiprintf_r+0x1da>
 8002998:	2207      	movs	r2, #7
 800299a:	9b07      	ldr	r3, [sp, #28]
 800299c:	3307      	adds	r3, #7
 800299e:	4393      	bics	r3, r2
 80029a0:	3308      	adds	r3, #8
 80029a2:	9307      	str	r3, [sp, #28]
 80029a4:	6963      	ldr	r3, [r4, #20]
 80029a6:	9a04      	ldr	r2, [sp, #16]
 80029a8:	189b      	adds	r3, r3, r2
 80029aa:	6163      	str	r3, [r4, #20]
 80029ac:	e762      	b.n	8002874 <_vfiprintf_r+0x70>
 80029ae:	4343      	muls	r3, r0
 80029b0:	002e      	movs	r6, r5
 80029b2:	2101      	movs	r1, #1
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	e7a4      	b.n	8002902 <_vfiprintf_r+0xfe>
 80029b8:	2300      	movs	r3, #0
 80029ba:	200a      	movs	r0, #10
 80029bc:	0019      	movs	r1, r3
 80029be:	3601      	adds	r6, #1
 80029c0:	6063      	str	r3, [r4, #4]
 80029c2:	7832      	ldrb	r2, [r6, #0]
 80029c4:	1c75      	adds	r5, r6, #1
 80029c6:	3a30      	subs	r2, #48	@ 0x30
 80029c8:	2a09      	cmp	r2, #9
 80029ca:	d903      	bls.n	80029d4 <_vfiprintf_r+0x1d0>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0c8      	beq.n	8002962 <_vfiprintf_r+0x15e>
 80029d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80029d2:	e7c6      	b.n	8002962 <_vfiprintf_r+0x15e>
 80029d4:	4341      	muls	r1, r0
 80029d6:	002e      	movs	r6, r5
 80029d8:	2301      	movs	r3, #1
 80029da:	1889      	adds	r1, r1, r2
 80029dc:	e7f1      	b.n	80029c2 <_vfiprintf_r+0x1be>
 80029de:	aa07      	add	r2, sp, #28
 80029e0:	9200      	str	r2, [sp, #0]
 80029e2:	0021      	movs	r1, r4
 80029e4:	003a      	movs	r2, r7
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <_vfiprintf_r+0x234>)
 80029e8:	9803      	ldr	r0, [sp, #12]
 80029ea:	e000      	b.n	80029ee <_vfiprintf_r+0x1ea>
 80029ec:	bf00      	nop
 80029ee:	9004      	str	r0, [sp, #16]
 80029f0:	9b04      	ldr	r3, [sp, #16]
 80029f2:	3301      	adds	r3, #1
 80029f4:	d1d6      	bne.n	80029a4 <_vfiprintf_r+0x1a0>
 80029f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029f8:	07db      	lsls	r3, r3, #31
 80029fa:	d405      	bmi.n	8002a08 <_vfiprintf_r+0x204>
 80029fc:	89bb      	ldrh	r3, [r7, #12]
 80029fe:	059b      	lsls	r3, r3, #22
 8002a00:	d402      	bmi.n	8002a08 <_vfiprintf_r+0x204>
 8002a02:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002a04:	f7ff fdd8 	bl	80025b8 <__retarget_lock_release_recursive>
 8002a08:	89bb      	ldrh	r3, [r7, #12]
 8002a0a:	065b      	lsls	r3, r3, #25
 8002a0c:	d500      	bpl.n	8002a10 <_vfiprintf_r+0x20c>
 8002a0e:	e71e      	b.n	800284e <_vfiprintf_r+0x4a>
 8002a10:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002a12:	e71e      	b.n	8002852 <_vfiprintf_r+0x4e>
 8002a14:	aa07      	add	r2, sp, #28
 8002a16:	9200      	str	r2, [sp, #0]
 8002a18:	0021      	movs	r1, r4
 8002a1a:	003a      	movs	r2, r7
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <_vfiprintf_r+0x234>)
 8002a1e:	9803      	ldr	r0, [sp, #12]
 8002a20:	f000 f87c 	bl	8002b1c <_printf_i>
 8002a24:	e7e3      	b.n	80029ee <_vfiprintf_r+0x1ea>
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	080031b0 	.word	0x080031b0
 8002a2c:	080031b6 	.word	0x080031b6
 8002a30:	080031ba 	.word	0x080031ba
 8002a34:	00000000 	.word	0x00000000
 8002a38:	080027df 	.word	0x080027df

08002a3c <_printf_common>:
 8002a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3e:	0016      	movs	r6, r2
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	688a      	ldr	r2, [r1, #8]
 8002a44:	690b      	ldr	r3, [r1, #16]
 8002a46:	000c      	movs	r4, r1
 8002a48:	9000      	str	r0, [sp, #0]
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	da00      	bge.n	8002a50 <_printf_common+0x14>
 8002a4e:	0013      	movs	r3, r2
 8002a50:	0022      	movs	r2, r4
 8002a52:	6033      	str	r3, [r6, #0]
 8002a54:	3243      	adds	r2, #67	@ 0x43
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	d001      	beq.n	8002a60 <_printf_common+0x24>
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	6033      	str	r3, [r6, #0]
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	d502      	bpl.n	8002a6c <_printf_common+0x30>
 8002a66:	6833      	ldr	r3, [r6, #0]
 8002a68:	3302      	adds	r3, #2
 8002a6a:	6033      	str	r3, [r6, #0]
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	2306      	movs	r3, #6
 8002a70:	0015      	movs	r5, r2
 8002a72:	401d      	ands	r5, r3
 8002a74:	421a      	tst	r2, r3
 8002a76:	d027      	beq.n	8002ac8 <_printf_common+0x8c>
 8002a78:	0023      	movs	r3, r4
 8002a7a:	3343      	adds	r3, #67	@ 0x43
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	4193      	sbcs	r3, r2
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	0692      	lsls	r2, r2, #26
 8002a86:	d430      	bmi.n	8002aea <_printf_common+0xae>
 8002a88:	0022      	movs	r2, r4
 8002a8a:	9901      	ldr	r1, [sp, #4]
 8002a8c:	9800      	ldr	r0, [sp, #0]
 8002a8e:	9d08      	ldr	r5, [sp, #32]
 8002a90:	3243      	adds	r2, #67	@ 0x43
 8002a92:	47a8      	blx	r5
 8002a94:	3001      	adds	r0, #1
 8002a96:	d025      	beq.n	8002ae4 <_printf_common+0xa8>
 8002a98:	2206      	movs	r2, #6
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d105      	bne.n	8002ab0 <_printf_common+0x74>
 8002aa4:	6833      	ldr	r3, [r6, #0]
 8002aa6:	68e5      	ldr	r5, [r4, #12]
 8002aa8:	1aed      	subs	r5, r5, r3
 8002aaa:	43eb      	mvns	r3, r5
 8002aac:	17db      	asrs	r3, r3, #31
 8002aae:	401d      	ands	r5, r3
 8002ab0:	68a3      	ldr	r3, [r4, #8]
 8002ab2:	6922      	ldr	r2, [r4, #16]
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	dd01      	ble.n	8002abc <_printf_common+0x80>
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	18ed      	adds	r5, r5, r3
 8002abc:	2600      	movs	r6, #0
 8002abe:	42b5      	cmp	r5, r6
 8002ac0:	d120      	bne.n	8002b04 <_printf_common+0xc8>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e010      	b.n	8002ae8 <_printf_common+0xac>
 8002ac6:	3501      	adds	r5, #1
 8002ac8:	68e3      	ldr	r3, [r4, #12]
 8002aca:	6832      	ldr	r2, [r6, #0]
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	42ab      	cmp	r3, r5
 8002ad0:	ddd2      	ble.n	8002a78 <_printf_common+0x3c>
 8002ad2:	0022      	movs	r2, r4
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	9901      	ldr	r1, [sp, #4]
 8002ad8:	9800      	ldr	r0, [sp, #0]
 8002ada:	9f08      	ldr	r7, [sp, #32]
 8002adc:	3219      	adds	r2, #25
 8002ade:	47b8      	blx	r7
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d1f0      	bne.n	8002ac6 <_printf_common+0x8a>
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	4240      	negs	r0, r0
 8002ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002aea:	2030      	movs	r0, #48	@ 0x30
 8002aec:	18e1      	adds	r1, r4, r3
 8002aee:	3143      	adds	r1, #67	@ 0x43
 8002af0:	7008      	strb	r0, [r1, #0]
 8002af2:	0021      	movs	r1, r4
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	3145      	adds	r1, #69	@ 0x45
 8002af8:	7809      	ldrb	r1, [r1, #0]
 8002afa:	18a2      	adds	r2, r4, r2
 8002afc:	3243      	adds	r2, #67	@ 0x43
 8002afe:	3302      	adds	r3, #2
 8002b00:	7011      	strb	r1, [r2, #0]
 8002b02:	e7c1      	b.n	8002a88 <_printf_common+0x4c>
 8002b04:	0022      	movs	r2, r4
 8002b06:	2301      	movs	r3, #1
 8002b08:	9901      	ldr	r1, [sp, #4]
 8002b0a:	9800      	ldr	r0, [sp, #0]
 8002b0c:	9f08      	ldr	r7, [sp, #32]
 8002b0e:	321a      	adds	r2, #26
 8002b10:	47b8      	blx	r7
 8002b12:	3001      	adds	r0, #1
 8002b14:	d0e6      	beq.n	8002ae4 <_printf_common+0xa8>
 8002b16:	3601      	adds	r6, #1
 8002b18:	e7d1      	b.n	8002abe <_printf_common+0x82>
	...

08002b1c <_printf_i>:
 8002b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1e:	b08b      	sub	sp, #44	@ 0x2c
 8002b20:	9206      	str	r2, [sp, #24]
 8002b22:	000a      	movs	r2, r1
 8002b24:	3243      	adds	r2, #67	@ 0x43
 8002b26:	9307      	str	r3, [sp, #28]
 8002b28:	9005      	str	r0, [sp, #20]
 8002b2a:	9203      	str	r2, [sp, #12]
 8002b2c:	7e0a      	ldrb	r2, [r1, #24]
 8002b2e:	000c      	movs	r4, r1
 8002b30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002b32:	2a78      	cmp	r2, #120	@ 0x78
 8002b34:	d809      	bhi.n	8002b4a <_printf_i+0x2e>
 8002b36:	2a62      	cmp	r2, #98	@ 0x62
 8002b38:	d80b      	bhi.n	8002b52 <_printf_i+0x36>
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d100      	bne.n	8002b40 <_printf_i+0x24>
 8002b3e:	e0bc      	b.n	8002cba <_printf_i+0x19e>
 8002b40:	497b      	ldr	r1, [pc, #492]	@ (8002d30 <_printf_i+0x214>)
 8002b42:	9104      	str	r1, [sp, #16]
 8002b44:	2a58      	cmp	r2, #88	@ 0x58
 8002b46:	d100      	bne.n	8002b4a <_printf_i+0x2e>
 8002b48:	e090      	b.n	8002c6c <_printf_i+0x150>
 8002b4a:	0025      	movs	r5, r4
 8002b4c:	3542      	adds	r5, #66	@ 0x42
 8002b4e:	702a      	strb	r2, [r5, #0]
 8002b50:	e022      	b.n	8002b98 <_printf_i+0x7c>
 8002b52:	0010      	movs	r0, r2
 8002b54:	3863      	subs	r0, #99	@ 0x63
 8002b56:	2815      	cmp	r0, #21
 8002b58:	d8f7      	bhi.n	8002b4a <_printf_i+0x2e>
 8002b5a:	f7fd fad3 	bl	8000104 <__gnu_thumb1_case_shi>
 8002b5e:	0016      	.short	0x0016
 8002b60:	fff6001f 	.word	0xfff6001f
 8002b64:	fff6fff6 	.word	0xfff6fff6
 8002b68:	001ffff6 	.word	0x001ffff6
 8002b6c:	fff6fff6 	.word	0xfff6fff6
 8002b70:	fff6fff6 	.word	0xfff6fff6
 8002b74:	003600a1 	.word	0x003600a1
 8002b78:	fff60080 	.word	0xfff60080
 8002b7c:	00b2fff6 	.word	0x00b2fff6
 8002b80:	0036fff6 	.word	0x0036fff6
 8002b84:	fff6fff6 	.word	0xfff6fff6
 8002b88:	0084      	.short	0x0084
 8002b8a:	0025      	movs	r5, r4
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	3542      	adds	r5, #66	@ 0x42
 8002b90:	1d11      	adds	r1, r2, #4
 8002b92:	6019      	str	r1, [r3, #0]
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	702b      	strb	r3, [r5, #0]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0a0      	b.n	8002cde <_printf_i+0x1c2>
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	6809      	ldr	r1, [r1, #0]
 8002ba0:	1d02      	adds	r2, r0, #4
 8002ba2:	060d      	lsls	r5, r1, #24
 8002ba4:	d50b      	bpl.n	8002bbe <_printf_i+0xa2>
 8002ba6:	6806      	ldr	r6, [r0, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	da03      	bge.n	8002bb6 <_printf_i+0x9a>
 8002bae:	232d      	movs	r3, #45	@ 0x2d
 8002bb0:	9a03      	ldr	r2, [sp, #12]
 8002bb2:	4276      	negs	r6, r6
 8002bb4:	7013      	strb	r3, [r2, #0]
 8002bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d30 <_printf_i+0x214>)
 8002bb8:	270a      	movs	r7, #10
 8002bba:	9304      	str	r3, [sp, #16]
 8002bbc:	e018      	b.n	8002bf0 <_printf_i+0xd4>
 8002bbe:	6806      	ldr	r6, [r0, #0]
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	0649      	lsls	r1, r1, #25
 8002bc4:	d5f1      	bpl.n	8002baa <_printf_i+0x8e>
 8002bc6:	b236      	sxth	r6, r6
 8002bc8:	e7ef      	b.n	8002baa <_printf_i+0x8e>
 8002bca:	6808      	ldr	r0, [r1, #0]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	c940      	ldmia	r1!, {r6}
 8002bd0:	0605      	lsls	r5, r0, #24
 8002bd2:	d402      	bmi.n	8002bda <_printf_i+0xbe>
 8002bd4:	0640      	lsls	r0, r0, #25
 8002bd6:	d500      	bpl.n	8002bda <_printf_i+0xbe>
 8002bd8:	b2b6      	uxth	r6, r6
 8002bda:	6019      	str	r1, [r3, #0]
 8002bdc:	4b54      	ldr	r3, [pc, #336]	@ (8002d30 <_printf_i+0x214>)
 8002bde:	270a      	movs	r7, #10
 8002be0:	9304      	str	r3, [sp, #16]
 8002be2:	2a6f      	cmp	r2, #111	@ 0x6f
 8002be4:	d100      	bne.n	8002be8 <_printf_i+0xcc>
 8002be6:	3f02      	subs	r7, #2
 8002be8:	0023      	movs	r3, r4
 8002bea:	2200      	movs	r2, #0
 8002bec:	3343      	adds	r3, #67	@ 0x43
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	6863      	ldr	r3, [r4, #4]
 8002bf2:	60a3      	str	r3, [r4, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db03      	blt.n	8002c00 <_printf_i+0xe4>
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	6822      	ldr	r2, [r4, #0]
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	6022      	str	r2, [r4, #0]
 8002c00:	2e00      	cmp	r6, #0
 8002c02:	d102      	bne.n	8002c0a <_printf_i+0xee>
 8002c04:	9d03      	ldr	r5, [sp, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <_printf_i+0x108>
 8002c0a:	9d03      	ldr	r5, [sp, #12]
 8002c0c:	0030      	movs	r0, r6
 8002c0e:	0039      	movs	r1, r7
 8002c10:	f7fd fb08 	bl	8000224 <__aeabi_uidivmod>
 8002c14:	9b04      	ldr	r3, [sp, #16]
 8002c16:	3d01      	subs	r5, #1
 8002c18:	5c5b      	ldrb	r3, [r3, r1]
 8002c1a:	702b      	strb	r3, [r5, #0]
 8002c1c:	0033      	movs	r3, r6
 8002c1e:	0006      	movs	r6, r0
 8002c20:	429f      	cmp	r7, r3
 8002c22:	d9f3      	bls.n	8002c0c <_printf_i+0xf0>
 8002c24:	2f08      	cmp	r7, #8
 8002c26:	d109      	bne.n	8002c3c <_printf_i+0x120>
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	07db      	lsls	r3, r3, #31
 8002c2c:	d506      	bpl.n	8002c3c <_printf_i+0x120>
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	6923      	ldr	r3, [r4, #16]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dc02      	bgt.n	8002c3c <_printf_i+0x120>
 8002c36:	2330      	movs	r3, #48	@ 0x30
 8002c38:	3d01      	subs	r5, #1
 8002c3a:	702b      	strb	r3, [r5, #0]
 8002c3c:	9b03      	ldr	r3, [sp, #12]
 8002c3e:	1b5b      	subs	r3, r3, r5
 8002c40:	6123      	str	r3, [r4, #16]
 8002c42:	9b07      	ldr	r3, [sp, #28]
 8002c44:	0021      	movs	r1, r4
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	9805      	ldr	r0, [sp, #20]
 8002c4a:	9b06      	ldr	r3, [sp, #24]
 8002c4c:	aa09      	add	r2, sp, #36	@ 0x24
 8002c4e:	f7ff fef5 	bl	8002a3c <_printf_common>
 8002c52:	3001      	adds	r0, #1
 8002c54:	d148      	bne.n	8002ce8 <_printf_i+0x1cc>
 8002c56:	2001      	movs	r0, #1
 8002c58:	4240      	negs	r0, r0
 8002c5a:	b00b      	add	sp, #44	@ 0x2c
 8002c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c5e:	2220      	movs	r2, #32
 8002c60:	6809      	ldr	r1, [r1, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	6022      	str	r2, [r4, #0]
 8002c66:	2278      	movs	r2, #120	@ 0x78
 8002c68:	4932      	ldr	r1, [pc, #200]	@ (8002d34 <_printf_i+0x218>)
 8002c6a:	9104      	str	r1, [sp, #16]
 8002c6c:	0021      	movs	r1, r4
 8002c6e:	3145      	adds	r1, #69	@ 0x45
 8002c70:	700a      	strb	r2, [r1, #0]
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	6822      	ldr	r2, [r4, #0]
 8002c76:	c940      	ldmia	r1!, {r6}
 8002c78:	0610      	lsls	r0, r2, #24
 8002c7a:	d402      	bmi.n	8002c82 <_printf_i+0x166>
 8002c7c:	0650      	lsls	r0, r2, #25
 8002c7e:	d500      	bpl.n	8002c82 <_printf_i+0x166>
 8002c80:	b2b6      	uxth	r6, r6
 8002c82:	6019      	str	r1, [r3, #0]
 8002c84:	07d3      	lsls	r3, r2, #31
 8002c86:	d502      	bpl.n	8002c8e <_printf_i+0x172>
 8002c88:	2320      	movs	r3, #32
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	2e00      	cmp	r6, #0
 8002c90:	d001      	beq.n	8002c96 <_printf_i+0x17a>
 8002c92:	2710      	movs	r7, #16
 8002c94:	e7a8      	b.n	8002be8 <_printf_i+0xcc>
 8002c96:	2220      	movs	r2, #32
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	e7f8      	b.n	8002c92 <_printf_i+0x176>
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	680d      	ldr	r5, [r1, #0]
 8002ca4:	1d10      	adds	r0, r2, #4
 8002ca6:	6949      	ldr	r1, [r1, #20]
 8002ca8:	6018      	str	r0, [r3, #0]
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	062e      	lsls	r6, r5, #24
 8002cae:	d501      	bpl.n	8002cb4 <_printf_i+0x198>
 8002cb0:	6019      	str	r1, [r3, #0]
 8002cb2:	e002      	b.n	8002cba <_printf_i+0x19e>
 8002cb4:	066d      	lsls	r5, r5, #25
 8002cb6:	d5fb      	bpl.n	8002cb0 <_printf_i+0x194>
 8002cb8:	8019      	strh	r1, [r3, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9d03      	ldr	r5, [sp, #12]
 8002cbe:	6123      	str	r3, [r4, #16]
 8002cc0:	e7bf      	b.n	8002c42 <_printf_i+0x126>
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	1d11      	adds	r1, r2, #4
 8002cc6:	6019      	str	r1, [r3, #0]
 8002cc8:	6815      	ldr	r5, [r2, #0]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	0028      	movs	r0, r5
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	f000 f996 	bl	8003000 <memchr>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	d001      	beq.n	8002cdc <_printf_i+0x1c0>
 8002cd8:	1b40      	subs	r0, r0, r5
 8002cda:	6060      	str	r0, [r4, #4]
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	6123      	str	r3, [r4, #16]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9a03      	ldr	r2, [sp, #12]
 8002ce4:	7013      	strb	r3, [r2, #0]
 8002ce6:	e7ac      	b.n	8002c42 <_printf_i+0x126>
 8002ce8:	002a      	movs	r2, r5
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	9906      	ldr	r1, [sp, #24]
 8002cee:	9805      	ldr	r0, [sp, #20]
 8002cf0:	9d07      	ldr	r5, [sp, #28]
 8002cf2:	47a8      	blx	r5
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d0ae      	beq.n	8002c56 <_printf_i+0x13a>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	079b      	lsls	r3, r3, #30
 8002cfc:	d415      	bmi.n	8002d2a <_printf_i+0x20e>
 8002cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d00:	68e0      	ldr	r0, [r4, #12]
 8002d02:	4298      	cmp	r0, r3
 8002d04:	daa9      	bge.n	8002c5a <_printf_i+0x13e>
 8002d06:	0018      	movs	r0, r3
 8002d08:	e7a7      	b.n	8002c5a <_printf_i+0x13e>
 8002d0a:	0022      	movs	r2, r4
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	9906      	ldr	r1, [sp, #24]
 8002d10:	9805      	ldr	r0, [sp, #20]
 8002d12:	9e07      	ldr	r6, [sp, #28]
 8002d14:	3219      	adds	r2, #25
 8002d16:	47b0      	blx	r6
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d09c      	beq.n	8002c56 <_printf_i+0x13a>
 8002d1c:	3501      	adds	r5, #1
 8002d1e:	68e3      	ldr	r3, [r4, #12]
 8002d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	42ab      	cmp	r3, r5
 8002d26:	dcf0      	bgt.n	8002d0a <_printf_i+0x1ee>
 8002d28:	e7e9      	b.n	8002cfe <_printf_i+0x1e2>
 8002d2a:	2500      	movs	r5, #0
 8002d2c:	e7f7      	b.n	8002d1e <_printf_i+0x202>
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	080031c1 	.word	0x080031c1
 8002d34:	080031d2 	.word	0x080031d2

08002d38 <__sflush_r>:
 8002d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	5e8b      	ldrsh	r3, [r1, r2]
 8002d3e:	0005      	movs	r5, r0
 8002d40:	000c      	movs	r4, r1
 8002d42:	071a      	lsls	r2, r3, #28
 8002d44:	d456      	bmi.n	8002df4 <__sflush_r+0xbc>
 8002d46:	684a      	ldr	r2, [r1, #4]
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	dc02      	bgt.n	8002d52 <__sflush_r+0x1a>
 8002d4c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	dd4e      	ble.n	8002df0 <__sflush_r+0xb8>
 8002d52:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002d54:	2f00      	cmp	r7, #0
 8002d56:	d04b      	beq.n	8002df0 <__sflush_r+0xb8>
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2080      	movs	r0, #128	@ 0x80
 8002d5c:	682e      	ldr	r6, [r5, #0]
 8002d5e:	602a      	str	r2, [r5, #0]
 8002d60:	001a      	movs	r2, r3
 8002d62:	0140      	lsls	r0, r0, #5
 8002d64:	6a21      	ldr	r1, [r4, #32]
 8002d66:	4002      	ands	r2, r0
 8002d68:	4203      	tst	r3, r0
 8002d6a:	d033      	beq.n	8002dd4 <__sflush_r+0x9c>
 8002d6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	075b      	lsls	r3, r3, #29
 8002d72:	d506      	bpl.n	8002d82 <__sflush_r+0x4a>
 8002d74:	6863      	ldr	r3, [r4, #4]
 8002d76:	1ad2      	subs	r2, r2, r3
 8002d78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <__sflush_r+0x4a>
 8002d7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d80:	1ad2      	subs	r2, r2, r3
 8002d82:	2300      	movs	r3, #0
 8002d84:	0028      	movs	r0, r5
 8002d86:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002d88:	6a21      	ldr	r1, [r4, #32]
 8002d8a:	47b8      	blx	r7
 8002d8c:	89a2      	ldrh	r2, [r4, #12]
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d106      	bne.n	8002da0 <__sflush_r+0x68>
 8002d92:	6829      	ldr	r1, [r5, #0]
 8002d94:	291d      	cmp	r1, #29
 8002d96:	d846      	bhi.n	8002e26 <__sflush_r+0xee>
 8002d98:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <__sflush_r+0x108>)
 8002d9a:	410b      	asrs	r3, r1
 8002d9c:	07db      	lsls	r3, r3, #31
 8002d9e:	d442      	bmi.n	8002e26 <__sflush_r+0xee>
 8002da0:	2300      	movs	r3, #0
 8002da2:	6063      	str	r3, [r4, #4]
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	04d2      	lsls	r2, r2, #19
 8002daa:	d505      	bpl.n	8002db8 <__sflush_r+0x80>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <__sflush_r+0x7e>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d100      	bne.n	8002db8 <__sflush_r+0x80>
 8002db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002dba:	602e      	str	r6, [r5, #0]
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	d017      	beq.n	8002df0 <__sflush_r+0xb8>
 8002dc0:	0023      	movs	r3, r4
 8002dc2:	3344      	adds	r3, #68	@ 0x44
 8002dc4:	4299      	cmp	r1, r3
 8002dc6:	d002      	beq.n	8002dce <__sflush_r+0x96>
 8002dc8:	0028      	movs	r0, r5
 8002dca:	f7ff fbf7 	bl	80025bc <_free_r>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002dd2:	e00d      	b.n	8002df0 <__sflush_r+0xb8>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	47b8      	blx	r7
 8002dda:	0002      	movs	r2, r0
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d1c6      	bne.n	8002d6e <__sflush_r+0x36>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0c3      	beq.n	8002d6e <__sflush_r+0x36>
 8002de6:	2b1d      	cmp	r3, #29
 8002de8:	d001      	beq.n	8002dee <__sflush_r+0xb6>
 8002dea:	2b16      	cmp	r3, #22
 8002dec:	d11a      	bne.n	8002e24 <__sflush_r+0xec>
 8002dee:	602e      	str	r6, [r5, #0]
 8002df0:	2000      	movs	r0, #0
 8002df2:	e01e      	b.n	8002e32 <__sflush_r+0xfa>
 8002df4:	690e      	ldr	r6, [r1, #16]
 8002df6:	2e00      	cmp	r6, #0
 8002df8:	d0fa      	beq.n	8002df0 <__sflush_r+0xb8>
 8002dfa:	680f      	ldr	r7, [r1, #0]
 8002dfc:	600e      	str	r6, [r1, #0]
 8002dfe:	1bba      	subs	r2, r7, r6
 8002e00:	9201      	str	r2, [sp, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	079b      	lsls	r3, r3, #30
 8002e06:	d100      	bne.n	8002e0a <__sflush_r+0xd2>
 8002e08:	694a      	ldr	r2, [r1, #20]
 8002e0a:	60a2      	str	r2, [r4, #8]
 8002e0c:	9b01      	ldr	r3, [sp, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	ddee      	ble.n	8002df0 <__sflush_r+0xb8>
 8002e12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e14:	0032      	movs	r2, r6
 8002e16:	001f      	movs	r7, r3
 8002e18:	0028      	movs	r0, r5
 8002e1a:	9b01      	ldr	r3, [sp, #4]
 8002e1c:	6a21      	ldr	r1, [r4, #32]
 8002e1e:	47b8      	blx	r7
 8002e20:	2800      	cmp	r0, #0
 8002e22:	dc07      	bgt.n	8002e34 <__sflush_r+0xfc>
 8002e24:	89a2      	ldrh	r2, [r4, #12]
 8002e26:	2340      	movs	r3, #64	@ 0x40
 8002e28:	2001      	movs	r0, #1
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	4240      	negs	r0, r0
 8002e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	1836      	adds	r6, r6, r0
 8002e38:	1a1b      	subs	r3, r3, r0
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	e7e6      	b.n	8002e0c <__sflush_r+0xd4>
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	dfbffffe 	.word	0xdfbffffe

08002e44 <_fflush_r>:
 8002e44:	690b      	ldr	r3, [r1, #16]
 8002e46:	b570      	push	{r4, r5, r6, lr}
 8002e48:	0005      	movs	r5, r0
 8002e4a:	000c      	movs	r4, r1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <_fflush_r+0x12>
 8002e50:	2500      	movs	r5, #0
 8002e52:	0028      	movs	r0, r5
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d004      	beq.n	8002e64 <_fflush_r+0x20>
 8002e5a:	6a03      	ldr	r3, [r0, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <_fflush_r+0x20>
 8002e60:	f7ff fa98 	bl	8002394 <__sinit>
 8002e64:	220c      	movs	r2, #12
 8002e66:	5ea3      	ldrsh	r3, [r4, r2]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f1      	beq.n	8002e50 <_fflush_r+0xc>
 8002e6c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e6e:	07d2      	lsls	r2, r2, #31
 8002e70:	d404      	bmi.n	8002e7c <_fflush_r+0x38>
 8002e72:	059b      	lsls	r3, r3, #22
 8002e74:	d402      	bmi.n	8002e7c <_fflush_r+0x38>
 8002e76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e78:	f7ff fb9d 	bl	80025b6 <__retarget_lock_acquire_recursive>
 8002e7c:	0028      	movs	r0, r5
 8002e7e:	0021      	movs	r1, r4
 8002e80:	f7ff ff5a 	bl	8002d38 <__sflush_r>
 8002e84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e86:	0005      	movs	r5, r0
 8002e88:	07db      	lsls	r3, r3, #31
 8002e8a:	d4e2      	bmi.n	8002e52 <_fflush_r+0xe>
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	059b      	lsls	r3, r3, #22
 8002e90:	d4df      	bmi.n	8002e52 <_fflush_r+0xe>
 8002e92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e94:	f7ff fb90 	bl	80025b8 <__retarget_lock_release_recursive>
 8002e98:	e7db      	b.n	8002e52 <_fflush_r+0xe>

08002e9a <__swbuf_r>:
 8002e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9c:	0006      	movs	r6, r0
 8002e9e:	000d      	movs	r5, r1
 8002ea0:	0014      	movs	r4, r2
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d004      	beq.n	8002eb0 <__swbuf_r+0x16>
 8002ea6:	6a03      	ldr	r3, [r0, #32]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <__swbuf_r+0x16>
 8002eac:	f7ff fa72 	bl	8002394 <__sinit>
 8002eb0:	69a3      	ldr	r3, [r4, #24]
 8002eb2:	60a3      	str	r3, [r4, #8]
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	071b      	lsls	r3, r3, #28
 8002eb8:	d502      	bpl.n	8002ec0 <__swbuf_r+0x26>
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <__swbuf_r+0x3a>
 8002ec0:	0021      	movs	r1, r4
 8002ec2:	0030      	movs	r0, r6
 8002ec4:	f000 f82c 	bl	8002f20 <__swsetup_r>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d003      	beq.n	8002ed4 <__swbuf_r+0x3a>
 8002ecc:	2501      	movs	r5, #1
 8002ece:	426d      	negs	r5, r5
 8002ed0:	0028      	movs	r0, r5
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	b2ef      	uxtb	r7, r5
 8002eda:	1ac0      	subs	r0, r0, r3
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	b2ed      	uxtb	r5, r5
 8002ee0:	4283      	cmp	r3, r0
 8002ee2:	dc05      	bgt.n	8002ef0 <__swbuf_r+0x56>
 8002ee4:	0021      	movs	r1, r4
 8002ee6:	0030      	movs	r0, r6
 8002ee8:	f7ff ffac 	bl	8002e44 <_fflush_r>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d1ed      	bne.n	8002ecc <__swbuf_r+0x32>
 8002ef0:	68a3      	ldr	r3, [r4, #8]
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	6022      	str	r2, [r4, #0]
 8002efe:	701f      	strb	r7, [r3, #0]
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	4283      	cmp	r3, r0
 8002f04:	d004      	beq.n	8002f10 <__swbuf_r+0x76>
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	07db      	lsls	r3, r3, #31
 8002f0a:	d5e1      	bpl.n	8002ed0 <__swbuf_r+0x36>
 8002f0c:	2d0a      	cmp	r5, #10
 8002f0e:	d1df      	bne.n	8002ed0 <__swbuf_r+0x36>
 8002f10:	0021      	movs	r1, r4
 8002f12:	0030      	movs	r0, r6
 8002f14:	f7ff ff96 	bl	8002e44 <_fflush_r>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d0d9      	beq.n	8002ed0 <__swbuf_r+0x36>
 8002f1c:	e7d6      	b.n	8002ecc <__swbuf_r+0x32>
	...

08002f20 <__swsetup_r>:
 8002f20:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <__swsetup_r+0xb8>)
 8002f22:	b570      	push	{r4, r5, r6, lr}
 8002f24:	0005      	movs	r5, r0
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	000c      	movs	r4, r1
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d004      	beq.n	8002f38 <__swsetup_r+0x18>
 8002f2e:	6a03      	ldr	r3, [r0, #32]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <__swsetup_r+0x18>
 8002f34:	f7ff fa2e 	bl	8002394 <__sinit>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	5ee2      	ldrsh	r2, [r4, r3]
 8002f3c:	0713      	lsls	r3, r2, #28
 8002f3e:	d423      	bmi.n	8002f88 <__swsetup_r+0x68>
 8002f40:	06d3      	lsls	r3, r2, #27
 8002f42:	d407      	bmi.n	8002f54 <__swsetup_r+0x34>
 8002f44:	2309      	movs	r3, #9
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	2340      	movs	r3, #64	@ 0x40
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	81a3      	strh	r3, [r4, #12]
 8002f50:	4240      	negs	r0, r0
 8002f52:	e03a      	b.n	8002fca <__swsetup_r+0xaa>
 8002f54:	0752      	lsls	r2, r2, #29
 8002f56:	d513      	bpl.n	8002f80 <__swsetup_r+0x60>
 8002f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d008      	beq.n	8002f70 <__swsetup_r+0x50>
 8002f5e:	0023      	movs	r3, r4
 8002f60:	3344      	adds	r3, #68	@ 0x44
 8002f62:	4299      	cmp	r1, r3
 8002f64:	d002      	beq.n	8002f6c <__swsetup_r+0x4c>
 8002f66:	0028      	movs	r0, r5
 8002f68:	f7ff fb28 	bl	80025bc <_free_r>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f70:	2224      	movs	r2, #36	@ 0x24
 8002f72:	89a3      	ldrh	r3, [r4, #12]
 8002f74:	4393      	bics	r3, r2
 8002f76:	81a3      	strh	r3, [r4, #12]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6063      	str	r3, [r4, #4]
 8002f7c:	6923      	ldr	r3, [r4, #16]
 8002f7e:	6023      	str	r3, [r4, #0]
 8002f80:	2308      	movs	r3, #8
 8002f82:	89a2      	ldrh	r2, [r4, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	81a3      	strh	r3, [r4, #12]
 8002f88:	6923      	ldr	r3, [r4, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <__swsetup_r+0x86>
 8002f8e:	21a0      	movs	r1, #160	@ 0xa0
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	0089      	lsls	r1, r1, #2
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	400b      	ands	r3, r1
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <__swsetup_r+0x86>
 8002f9e:	0021      	movs	r1, r4
 8002fa0:	0028      	movs	r0, r5
 8002fa2:	f000 f863 	bl	800306c <__smakebuf_r>
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	5ee2      	ldrsh	r2, [r4, r3]
 8002faa:	2101      	movs	r1, #1
 8002fac:	0013      	movs	r3, r2
 8002fae:	400b      	ands	r3, r1
 8002fb0:	420a      	tst	r2, r1
 8002fb2:	d00b      	beq.n	8002fcc <__swsetup_r+0xac>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60a3      	str	r3, [r4, #8]
 8002fb8:	6963      	ldr	r3, [r4, #20]
 8002fba:	425b      	negs	r3, r3
 8002fbc:	61a3      	str	r3, [r4, #24]
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	4283      	cmp	r3, r0
 8002fc4:	d101      	bne.n	8002fca <__swsetup_r+0xaa>
 8002fc6:	0613      	lsls	r3, r2, #24
 8002fc8:	d4be      	bmi.n	8002f48 <__swsetup_r+0x28>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	0791      	lsls	r1, r2, #30
 8002fce:	d400      	bmi.n	8002fd2 <__swsetup_r+0xb2>
 8002fd0:	6963      	ldr	r3, [r4, #20]
 8002fd2:	60a3      	str	r3, [r4, #8]
 8002fd4:	e7f3      	b.n	8002fbe <__swsetup_r+0x9e>
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	20000018 	.word	0x20000018

08002fdc <_sbrk_r>:
 8002fdc:	2300      	movs	r3, #0
 8002fde:	b570      	push	{r4, r5, r6, lr}
 8002fe0:	4d06      	ldr	r5, [pc, #24]	@ (8002ffc <_sbrk_r+0x20>)
 8002fe2:	0004      	movs	r4, r0
 8002fe4:	0008      	movs	r0, r1
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	f7fd fb0e 	bl	8000608 <_sbrk>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d103      	bne.n	8002ff8 <_sbrk_r+0x1c>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d000      	beq.n	8002ff8 <_sbrk_r+0x1c>
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	20000230 	.word	0x20000230

08003000 <memchr>:
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	1882      	adds	r2, r0, r2
 8003004:	4290      	cmp	r0, r2
 8003006:	d101      	bne.n	800300c <memchr+0xc>
 8003008:	2000      	movs	r0, #0
 800300a:	4770      	bx	lr
 800300c:	7803      	ldrb	r3, [r0, #0]
 800300e:	428b      	cmp	r3, r1
 8003010:	d0fb      	beq.n	800300a <memchr+0xa>
 8003012:	3001      	adds	r0, #1
 8003014:	e7f6      	b.n	8003004 <memchr+0x4>
	...

08003018 <__swhatbuf_r>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	000e      	movs	r6, r1
 800301c:	001d      	movs	r5, r3
 800301e:	230e      	movs	r3, #14
 8003020:	5ec9      	ldrsh	r1, [r1, r3]
 8003022:	0014      	movs	r4, r2
 8003024:	b096      	sub	sp, #88	@ 0x58
 8003026:	2900      	cmp	r1, #0
 8003028:	da0c      	bge.n	8003044 <__swhatbuf_r+0x2c>
 800302a:	89b2      	ldrh	r2, [r6, #12]
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	0011      	movs	r1, r2
 8003030:	4019      	ands	r1, r3
 8003032:	421a      	tst	r2, r3
 8003034:	d114      	bne.n	8003060 <__swhatbuf_r+0x48>
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	2000      	movs	r0, #0
 800303c:	6029      	str	r1, [r5, #0]
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	b016      	add	sp, #88	@ 0x58
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	466a      	mov	r2, sp
 8003046:	f000 f853 	bl	80030f0 <_fstat_r>
 800304a:	2800      	cmp	r0, #0
 800304c:	dbed      	blt.n	800302a <__swhatbuf_r+0x12>
 800304e:	23f0      	movs	r3, #240	@ 0xf0
 8003050:	9901      	ldr	r1, [sp, #4]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4019      	ands	r1, r3
 8003056:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <__swhatbuf_r+0x50>)
 8003058:	18c9      	adds	r1, r1, r3
 800305a:	424b      	negs	r3, r1
 800305c:	4159      	adcs	r1, r3
 800305e:	e7ea      	b.n	8003036 <__swhatbuf_r+0x1e>
 8003060:	2100      	movs	r1, #0
 8003062:	2340      	movs	r3, #64	@ 0x40
 8003064:	e7e9      	b.n	800303a <__swhatbuf_r+0x22>
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	ffffe000 	.word	0xffffe000

0800306c <__smakebuf_r>:
 800306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306e:	2602      	movs	r6, #2
 8003070:	898b      	ldrh	r3, [r1, #12]
 8003072:	0005      	movs	r5, r0
 8003074:	000c      	movs	r4, r1
 8003076:	b085      	sub	sp, #20
 8003078:	4233      	tst	r3, r6
 800307a:	d007      	beq.n	800308c <__smakebuf_r+0x20>
 800307c:	0023      	movs	r3, r4
 800307e:	3347      	adds	r3, #71	@ 0x47
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	6123      	str	r3, [r4, #16]
 8003084:	2301      	movs	r3, #1
 8003086:	6163      	str	r3, [r4, #20]
 8003088:	b005      	add	sp, #20
 800308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800308c:	ab03      	add	r3, sp, #12
 800308e:	aa02      	add	r2, sp, #8
 8003090:	f7ff ffc2 	bl	8003018 <__swhatbuf_r>
 8003094:	9f02      	ldr	r7, [sp, #8]
 8003096:	9001      	str	r0, [sp, #4]
 8003098:	0039      	movs	r1, r7
 800309a:	0028      	movs	r0, r5
 800309c:	f7ff fafa 	bl	8002694 <_malloc_r>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d108      	bne.n	80030b6 <__smakebuf_r+0x4a>
 80030a4:	220c      	movs	r2, #12
 80030a6:	5ea3      	ldrsh	r3, [r4, r2]
 80030a8:	059a      	lsls	r2, r3, #22
 80030aa:	d4ed      	bmi.n	8003088 <__smakebuf_r+0x1c>
 80030ac:	2203      	movs	r2, #3
 80030ae:	4393      	bics	r3, r2
 80030b0:	431e      	orrs	r6, r3
 80030b2:	81a6      	strh	r6, [r4, #12]
 80030b4:	e7e2      	b.n	800307c <__smakebuf_r+0x10>
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	89a2      	ldrh	r2, [r4, #12]
 80030ba:	6020      	str	r0, [r4, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	81a3      	strh	r3, [r4, #12]
 80030c0:	9b03      	ldr	r3, [sp, #12]
 80030c2:	6120      	str	r0, [r4, #16]
 80030c4:	6167      	str	r7, [r4, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00c      	beq.n	80030e4 <__smakebuf_r+0x78>
 80030ca:	0028      	movs	r0, r5
 80030cc:	230e      	movs	r3, #14
 80030ce:	5ee1      	ldrsh	r1, [r4, r3]
 80030d0:	f000 f820 	bl	8003114 <_isatty_r>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d005      	beq.n	80030e4 <__smakebuf_r+0x78>
 80030d8:	2303      	movs	r3, #3
 80030da:	89a2      	ldrh	r2, [r4, #12]
 80030dc:	439a      	bics	r2, r3
 80030de:	3b02      	subs	r3, #2
 80030e0:	4313      	orrs	r3, r2
 80030e2:	81a3      	strh	r3, [r4, #12]
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	9a01      	ldr	r2, [sp, #4]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	81a3      	strh	r3, [r4, #12]
 80030ec:	e7cc      	b.n	8003088 <__smakebuf_r+0x1c>
	...

080030f0 <_fstat_r>:
 80030f0:	2300      	movs	r3, #0
 80030f2:	b570      	push	{r4, r5, r6, lr}
 80030f4:	4d06      	ldr	r5, [pc, #24]	@ (8003110 <_fstat_r+0x20>)
 80030f6:	0004      	movs	r4, r0
 80030f8:	0008      	movs	r0, r1
 80030fa:	0011      	movs	r1, r2
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	f7fd fa61 	bl	80005c4 <_fstat>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d103      	bne.n	800310e <_fstat_r+0x1e>
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d000      	beq.n	800310e <_fstat_r+0x1e>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	20000230 	.word	0x20000230

08003114 <_isatty_r>:
 8003114:	2300      	movs	r3, #0
 8003116:	b570      	push	{r4, r5, r6, lr}
 8003118:	4d06      	ldr	r5, [pc, #24]	@ (8003134 <_isatty_r+0x20>)
 800311a:	0004      	movs	r4, r0
 800311c:	0008      	movs	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd fa5e 	bl	80005e0 <_isatty>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d103      	bne.n	8003130 <_isatty_r+0x1c>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d000      	beq.n	8003130 <_isatty_r+0x1c>
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	20000230 	.word	0x20000230

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
